â¬¤  debug     Preparing to convert provider docs {
  path: '.',
  provider: { type: 'registry', requirement: 'hashicorp/random' },
  failOnTranslationError: false,
  languages: [ 'typescript', 'python' ],
  files: [
    'index.md',
    'resources/uuid.md',
    'resources/string.md',
    'resources/shuffle.md',
    'resources/pet.md',
    'resources/password.md',
    'resources/integer.md',
    'resources/id.md'
  ],
  additionalProviderRequirements: [],
  parallelConversionsPerDocument: 3,
  parallelFileConversions: 1,
  doNotEditFileComment: 'Please do not edit this file, it is generated.'
}
â¬¤  debug     Initializing cdktf project in /tmp/cdktf-registry-docs017brx
[91m[2023-08-17T14:50:47.610] [ERROR] default - [39mThere are some problems with the CLI configuration:
â•·
â”‚ Error: The specified plugin cache dir /terraform-plugins cannot be opened: stat /terraform-plugins: no such file or directory
â”‚
â•µ

As a result of the above problems, Terraform may not behave as intended.




[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/random...
- Installing hashicorp/random v3.5.1...
- Installed hashicorp/random v3.5.1 (signed by HashiCorp)

Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m

added 2 packages, and audited 57 packages in 1s

7 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

added 309 packages, and audited 366 packages in 7s

37 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
========================================================================================================

  Your cdktf typescript project is ready!

  cat help                Print this message

  Compile:
    npm run get           Import/update Terraform providers and modules (you should check-in this directory)
    npm run compile       Compile typescript code to javascript (or "npm run watch")
    npm run watch         Watch for changes and compile typescript in the background
    npm run build         Compile typescript

  Synthesize:
    cdktf synth [stack]   Synthesize Terraform resources from stacks to cdktf.out/ (ready for 'terraform apply')

  Diff:
    cdktf diff [stack]    Perform a diff (terraform plan) for the given stack

  Deploy:
    cdktf deploy [stack]  Deploy the given stack

  Destroy:
    cdktf destroy [stack] Destroy the stack

  Test:
    npm run test        Runs unit tests (edit __tests__/main-test.ts to add your own tests)
    npm run test:watch  Watches the tests and reruns them on change

  Upgrades:
    npm run upgrade        Upgrade cdktf modules to latest version
    npm run upgrade:next   Upgrade cdktf modules to latest "@next" version (last commit)

 Use Providers:

  You can add prebuilt providers (if available) or locally generated ones using the add command:
  
  cdktf provider add "aws@~>3.0" null kreuzwerker/docker

  You can find all prebuilt providers on npm: https://www.npmjs.com/search?q=keywords:cdktf
  You can also install these providers directly through npm:

  npm install @cdktf/provider-aws
  npm install @cdktf/provider-google
  npm install @cdktf/provider-azurerm
  npm install @cdktf/provider-docker
  npm install @cdktf/provider-github
  npm install @cdktf/provider-null

  You can also build any module or provider locally. Learn more https://cdk.tf/modules-and-providers

========================================================================================================

â¬¤  debug     Preparation done, executing in /tmp/cdktf-registry-docs017brx
â¬¤  debug     Files to convert: [
  "index.md",
  "resources/uuid.md",
  "resources/string.md",
  "resources/shuffle.md",
  "resources/pet.md",
  "resources/password.md",
  "resources/integer.md",
  "resources/id.md"
]
â„¹  info      Converting 16 files to 2 languages
â„¹  info      Filtered 0 files that already exist and are up to date
â¬¤  debug     Converting markdown document with python code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_id Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_id generates random numbers that are intended to be
  used as unique identifiers for other resources.
  This resource does use a cryptographic random number generator in order
  to minimize the chance of collisions, making the results of this resource
  when a 16-byte identifier is requested of equivalent uniqueness to a
  type-4 UUID.
  This resource can be used in conjunction with resources that have
  the create_before_destroy lifecycle flag set to avoid conflicts with
  unique names during the brief period where both the old and new resources
  exist concurrently.
---

# random_id (Resource)

The resource `random_id` generates random numbers that are intended to be
used as unique identifiers for other resources.

This resource *does* use a cryptographic random number generator in order
to minimize the chance of collisions, making the results of this resource
when a 16-byte identifier is requested of equivalent uniqueness to a
type-4 UUID.

This resource can be used in conjunction with resources that have
the `create_before_destroy` lifecycle flag set to avoid conflicts with
unique names during the brief period where both the old and new resources
exist concurrently.

## Example Usage

```terraform
# The following example shows how to generate a unique name for an AWS EC2
# instance that changes each time a new AMI id is selected.

resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `byte_length` (Number) The number of random bytes to produce. The minimum value is 1, which produces eight bits of randomness.

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `prefix` (String) Arbitrary string to prefix the output value with. This string is supplied as-is, meaning it is not guaranteed to be URL-safe or base64 encoded.

### Read-Only

- `b64_std` (String) The generated id presented in base64 without additional transformations.
- `b64_url` (String) The generated id presented in base64, using the URL-friendly character set: case-sensitive letters, digits and the characters `_` and `-`.
- `dec` (String) The generated id presented in non-padded decimal digits.
- `hex` (String) The generated id presented in padded hexadecimal digits. This result will always be twice as long as the requested byte length.
- `id` (String) The generated id presented in base64 without additional transformations or prefix.

## Import

Import is supported using the following syntax:

```shell
# Random IDs can be imported using the b64_url with an optional prefix. This
# can be used to replace a config value with a value interpolated from the
# random provider without experiencing diffs.

# Example with no prefix:
terraform import random_id.server p-9hUg

# Example with prefix (prefix is separated by a ,):
$ terraform import random_id.server my-prefix-,p-9hUg
```

â„¹  info      Extracted 2 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "# The following example shows how to generate a unique name for an AWS EC2\n# instance that changes each time a new AMI id is selected.\n\nresource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
    "position": {
      "start": {
        "line": 35,
        "column": 1,
        "offset": 1393
      },
      "end": {
        "line": 59,
        "column": 4,
        "offset": 1985
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "# Random IDs can be imported using the b64_url with an optional prefix. This\n# can be used to replace a config value with a value interpolated from the\n# random provider without experiencing diffs.\n\n# Example with no prefix:\nterraform import random_id.server p-9hUg\n\n# Example with prefix (prefix is separated by a ,):\n$ terraform import random_id.server my-prefix-,p-9hUg",
    "position": {
      "start": {
        "line": 85,
        "column": 1,
        "offset": 3195
      },
      "end": {
        "line": 95,
        "column": 4,
        "offset": 3580
      }
    }
  }
]
â¬¤  debug     Converting snippet: '# Random IDs can be imported using the b64_url with an optional prefix. This
# can be used to replace a config value with a value interpolated from the
# random provider without experiencing diffs.

# Example with no prefix:
terraform import random_id.server p-9hUg

# Example with prefix (prefix is separated by a ,):
$ terraform import random_id.server my-prefix-,p-9hUg'
â¬¤  debug     Converting snippet: '# The following example shows how to generate a unique name for an AWS EC2
# instance that changes each time a new AMI id is selected.

resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}'
[91m[2023-08-17T14:50:56.958] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:9,1-2: Invalid character; This character is not used within the language. terraform.tf:6,27-28: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: '# Random IDs can be imported using the b64_url with an optional prefix. This
# can be used to replace a config value with a value interpolated from the
# random provider without experiencing diffs.

# Example with no prefix:
terraform import random_id.server p-9hUg

# Example with prefix (prefix is separated by a ,):
$ terraform import random_id.server my-prefix-,p-9hUg'
[91m[2023-08-17T14:50:56.991] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_id.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:50:57.022] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_id.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
â¬¤  debug     Converted snippet: '# The following example shows how to generate a unique name for an AWS EC2
# instance that changes each time a new AMI id is selected.

resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}' to 'from constructs import Construct
from cdktf import Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.instance import Instance
from imports.random.id import Id
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
        #     For a more precise conversion please use the --provider flag in convert.
        server = Id(self, "server",
            byte_length=8,
            keepers={
                "ami_id": ami_id.string_value
            }
        )
        aws_instance_server = Instance(self, "server_1",
            ami=Fn.lookup_nested(server, ["keepers", "ami_id"]),
            tags={
                "Name": "web-server ${" + server.hex + "}"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_instance_server.override_logical_id("server")'
â¬¤  debug     Converting markdown document with typescript code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_id Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_id generates random numbers that are intended to be
  used as unique identifiers for other resources.
  This resource does use a cryptographic random number generator in order
  to minimize the chance of collisions, making the results of this resource
  when a 16-byte identifier is requested of equivalent uniqueness to a
  type-4 UUID.
  This resource can be used in conjunction with resources that have
  the create_before_destroy lifecycle flag set to avoid conflicts with
  unique names during the brief period where both the old and new resources
  exist concurrently.
---

# random_id (Resource)

The resource `random_id` generates random numbers that are intended to be
used as unique identifiers for other resources.

This resource *does* use a cryptographic random number generator in order
to minimize the chance of collisions, making the results of this resource
when a 16-byte identifier is requested of equivalent uniqueness to a
type-4 UUID.

This resource can be used in conjunction with resources that have
the `create_before_destroy` lifecycle flag set to avoid conflicts with
unique names during the brief period where both the old and new resources
exist concurrently.

## Example Usage

```terraform
# The following example shows how to generate a unique name for an AWS EC2
# instance that changes each time a new AMI id is selected.

resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `byte_length` (Number) The number of random bytes to produce. The minimum value is 1, which produces eight bits of randomness.

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `prefix` (String) Arbitrary string to prefix the output value with. This string is supplied as-is, meaning it is not guaranteed to be URL-safe or base64 encoded.

### Read-Only

- `b64_std` (String) The generated id presented in base64 without additional transformations.
- `b64_url` (String) The generated id presented in base64, using the URL-friendly character set: case-sensitive letters, digits and the characters `_` and `-`.
- `dec` (String) The generated id presented in non-padded decimal digits.
- `hex` (String) The generated id presented in padded hexadecimal digits. This result will always be twice as long as the requested byte length.
- `id` (String) The generated id presented in base64 without additional transformations or prefix.

## Import

Import is supported using the following syntax:

```shell
# Random IDs can be imported using the b64_url with an optional prefix. This
# can be used to replace a config value with a value interpolated from the
# random provider without experiencing diffs.

# Example with no prefix:
terraform import random_id.server p-9hUg

# Example with prefix (prefix is separated by a ,):
$ terraform import random_id.server my-prefix-,p-9hUg
```

â„¹  info      Extracted 2 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "# The following example shows how to generate a unique name for an AWS EC2\n# instance that changes each time a new AMI id is selected.\n\nresource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
    "position": {
      "start": {
        "line": 35,
        "column": 1,
        "offset": 1393
      },
      "end": {
        "line": 59,
        "column": 4,
        "offset": 1985
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "# Random IDs can be imported using the b64_url with an optional prefix. This\n# can be used to replace a config value with a value interpolated from the\n# random provider without experiencing diffs.\n\n# Example with no prefix:\nterraform import random_id.server p-9hUg\n\n# Example with prefix (prefix is separated by a ,):\n$ terraform import random_id.server my-prefix-,p-9hUg",
    "position": {
      "start": {
        "line": 85,
        "column": 1,
        "offset": 3195
      },
      "end": {
        "line": 95,
        "column": 4,
        "offset": 3580
      }
    }
  }
]
â¬¤  debug     Converting snippet: '# Random IDs can be imported using the b64_url with an optional prefix. This
# can be used to replace a config value with a value interpolated from the
# random provider without experiencing diffs.

# Example with no prefix:
terraform import random_id.server p-9hUg

# Example with prefix (prefix is separated by a ,):
$ terraform import random_id.server my-prefix-,p-9hUg'
â¬¤  debug     Converting snippet: '# The following example shows how to generate a unique name for an AWS EC2
# instance that changes each time a new AMI id is selected.

resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}'
[91m[2023-08-17T14:51:00.568] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:9,1-2: Invalid character; This character is not used within the language. terraform.tf:6,27-28: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: '# Random IDs can be imported using the b64_url with an optional prefix. This
# can be used to replace a config value with a value interpolated from the
# random provider without experiencing diffs.

# Example with no prefix:
terraform import random_id.server p-9hUg

# Example with prefix (prefix is separated by a ,):
$ terraform import random_id.server my-prefix-,p-9hUg'
[91m[2023-08-17T14:51:00.572] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_id.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:00.575] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_id.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
â¬¤  debug     Converted snippet: '# The following example shows how to generate a unique name for an AWS EC2
# instance that changes each time a new AMI id is selected.

resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}' to 'import { Construct } from "constructs";
import { Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { Id } from "./.gen/providers/random/id";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
    For a more precise conversion please use the --provider flag in convert.*/
    const server = new Id(this, "server", {
      byteLength: 8,
      keepers: {
        ami_id: amiId.stringValue,
      },
    });
    const awsInstanceServer = new Instance(this, "server_1", {
      ami: Fn.lookupNested(server, ["keepers", "ami_id"]),
      tags: {
        Name: "web-server ${" + server.hex + "}",
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsInstanceServer.overrideLogicalId("server");
  }
}
'
â¬¤  debug     Converting markdown document with python code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_integer Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_integer generates random values from a given range, described by the min and max attributes of a given resource.
  This resource can be used in conjunction with resources that have the create_before_destroy lifecycle flag set, to avoid conflicts with unique names during the brief period where both the old and new resources exist concurrently.
---

# random_integer (Resource)

The resource `random_integer` generates random values from a given range, described by the `min` and `max` attributes of a given resource.

This resource can be used in conjunction with resources that have the `create_before_destroy` lifecycle flag set, to avoid conflicts with unique names during the brief period where both the old and new resources exist concurrently.

## Example Usage

```terraform
# The following example shows how to generate a random priority
# between 1 and 50000 for a aws_alb_listener_rule resource:

resource "random_integer" "priority" {
  min = 1
  max = 50000
  keepers = {
    # Generate a new integer each time we switch to a new listener ARN
    listener_arn = var.listener_arn
  }
}

resource "aws_alb_listener_rule" "main" {
  listener_arn = random_integer.priority.keepers.listener_arn
  priority     = random_integer.priority.result

  action {
    type             = "forward"
    target_group_arn = var.target_group_arn
  }
  # ... (other aws_alb_listener_rule arguments) ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `max` (Number) The maximum inclusive value of the range.
- `min` (Number) The minimum inclusive value of the range.

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `seed` (String) A custom seed to always produce the same value.

### Read-Only

- `id` (String) The string representation of the integer result.
- `result` (Number) The random integer result.

## Import

Import is supported using the following syntax:

```shell
# Random integers can be imported using the result, min, and max, with an
# optional seed. This can be used to replace a config value with a value
# interpolated from the random provider without experiencing diffs.

# Example (values are separated by a ,):
terraform import random_integer.priority 15390,1,50000
```

â„¹  info      Extracted 2 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "# The following example shows how to generate a random priority\n# between 1 and 50000 for a aws_alb_listener_rule resource:\n\nresource \"random_integer\" \"priority\" {\n  min = 1\n  max = 50000\n  keepers = {\n    # Generate a new integer each time we switch to a new listener ARN\n    listener_arn = var.listener_arn\n  }\n}\n\nresource \"aws_alb_listener_rule\" \"main\" {\n  listener_arn = random_integer.priority.keepers.listener_arn\n  priority     = random_integer.priority.result\n\n  action {\n    type             = \"forward\"\n    target_group_arn = var.target_group_arn\n  }\n  # ... (other aws_alb_listener_rule arguments) ...\n}",
    "position": {
      "start": {
        "line": 18,
        "column": 1,
        "offset": 960
      },
      "end": {
        "line": 41,
        "column": 4,
        "offset": 1591
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "# Random integers can be imported using the result, min, and max, with an\n# optional seed. This can be used to replace a config value with a value\n# interpolated from the random provider without experiencing diffs.\n\n# Example (values are separated by a ,):\nterraform import random_integer.priority 15390,1,50000",
    "position": {
      "start": {
        "line": 65,
        "column": 1,
        "offset": 2232
      },
      "end": {
        "line": 72,
        "column": 4,
        "offset": 2556
      }
    }
  }
]
â¬¤  debug     Converting snippet: '# Random integers can be imported using the result, min, and max, with an
# optional seed. This can be used to replace a config value with a value
# interpolated from the random provider without experiencing diffs.

# Example (values are separated by a ,):
terraform import random_integer.priority 15390,1,50000'
â¬¤  debug     Converting snippet: '# The following example shows how to generate a random priority
# between 1 and 50000 for a aws_alb_listener_rule resource:

resource "random_integer" "priority" {
  min = 1
  max = 50000
  keepers = {
    # Generate a new integer each time we switch to a new listener ARN
    listener_arn = var.listener_arn
  }
}

resource "aws_alb_listener_rule" "main" {
  listener_arn = random_integer.priority.keepers.listener_arn
  priority     = random_integer.priority.result

  action {
    type             = "forward"
    target_group_arn = var.target_group_arn
  }
  # ... (other aws_alb_listener_rule arguments) ...
}'
[91m[2023-08-17T14:51:00.626] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:6,32-33: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: '# Random integers can be imported using the result, min, and max, with an
# optional seed. This can be used to replace a config value with a value
# interpolated from the random provider without experiencing diffs.

# Example (values are separated by a ,):
terraform import random_integer.priority 15390,1,50000'
[91m[2023-08-17T14:51:00.643] [ERROR] default - [39mFound a reference that is unknown: ${var.target_group_arn} has reference "var.target_group_arn".The id was not found in ["aws_alb_listener_rule.main","random_integer.priority"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:00.643] [ERROR] default - [39mFound a reference that is unknown: ${var.listener_arn} has reference "var.listener_arn".The id was not found in ["aws_alb_listener_rule.main","random_integer.priority"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:00.645] [ERROR] default - [39mFound a reference that is unknown: ${var.listener_arn} has reference "var.listener_arn".The id was not found in ["aws_alb_listener_rule.main","random_integer.priority"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:00.657] [ERROR] default - [39mFound a reference that is unknown: ${var.target_group_arn} has reference "var.target_group_arn".The id was not found in ["aws_alb_listener_rule.main","random_integer.priority"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
â¬¤  debug     Converted snippet: '# The following example shows how to generate a random priority
# between 1 and 50000 for a aws_alb_listener_rule resource:

resource "random_integer" "priority" {
  min = 1
  max = 50000
  keepers = {
    # Generate a new integer each time we switch to a new listener ARN
    listener_arn = var.listener_arn
  }
}

resource "aws_alb_listener_rule" "main" {
  listener_arn = random_integer.priority.keepers.listener_arn
  priority     = random_integer.priority.result

  action {
    type             = "forward"
    target_group_arn = var.target_group_arn
  }
  # ... (other aws_alb_listener_rule arguments) ...
}' to 'from constructs import Construct
from cdktf import Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.alb_listener_rule import AlbListenerRule
from imports.random.integer import Integer
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
        #     For a more precise conversion please use the --provider flag in convert.
        priority = Integer(self, "priority",
            keepers={
                "listener_arn": listener_arn.string_value
            },
            max=50000,
            min=1
        )
        AlbListenerRule(self, "main",
            action=[{
                "target_group_arn": target_group_arn.value,
                "type": "forward"
            }
            ],
            listener_arn=Fn.lookup_nested(priority, ["keepers", "listener_arn"]),
            priority=priority.result
        )'
â¬¤  debug     Converting markdown document with typescript code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_integer Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_integer generates random values from a given range, described by the min and max attributes of a given resource.
  This resource can be used in conjunction with resources that have the create_before_destroy lifecycle flag set, to avoid conflicts with unique names during the brief period where both the old and new resources exist concurrently.
---

# random_integer (Resource)

The resource `random_integer` generates random values from a given range, described by the `min` and `max` attributes of a given resource.

This resource can be used in conjunction with resources that have the `create_before_destroy` lifecycle flag set, to avoid conflicts with unique names during the brief period where both the old and new resources exist concurrently.

## Example Usage

```terraform
# The following example shows how to generate a random priority
# between 1 and 50000 for a aws_alb_listener_rule resource:

resource "random_integer" "priority" {
  min = 1
  max = 50000
  keepers = {
    # Generate a new integer each time we switch to a new listener ARN
    listener_arn = var.listener_arn
  }
}

resource "aws_alb_listener_rule" "main" {
  listener_arn = random_integer.priority.keepers.listener_arn
  priority     = random_integer.priority.result

  action {
    type             = "forward"
    target_group_arn = var.target_group_arn
  }
  # ... (other aws_alb_listener_rule arguments) ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `max` (Number) The maximum inclusive value of the range.
- `min` (Number) The minimum inclusive value of the range.

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `seed` (String) A custom seed to always produce the same value.

### Read-Only

- `id` (String) The string representation of the integer result.
- `result` (Number) The random integer result.

## Import

Import is supported using the following syntax:

```shell
# Random integers can be imported using the result, min, and max, with an
# optional seed. This can be used to replace a config value with a value
# interpolated from the random provider without experiencing diffs.

# Example (values are separated by a ,):
terraform import random_integer.priority 15390,1,50000
```

â„¹  info      Extracted 2 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "# The following example shows how to generate a random priority\n# between 1 and 50000 for a aws_alb_listener_rule resource:\n\nresource \"random_integer\" \"priority\" {\n  min = 1\n  max = 50000\n  keepers = {\n    # Generate a new integer each time we switch to a new listener ARN\n    listener_arn = var.listener_arn\n  }\n}\n\nresource \"aws_alb_listener_rule\" \"main\" {\n  listener_arn = random_integer.priority.keepers.listener_arn\n  priority     = random_integer.priority.result\n\n  action {\n    type             = \"forward\"\n    target_group_arn = var.target_group_arn\n  }\n  # ... (other aws_alb_listener_rule arguments) ...\n}",
    "position": {
      "start": {
        "line": 18,
        "column": 1,
        "offset": 960
      },
      "end": {
        "line": 41,
        "column": 4,
        "offset": 1591
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "# Random integers can be imported using the result, min, and max, with an\n# optional seed. This can be used to replace a config value with a value\n# interpolated from the random provider without experiencing diffs.\n\n# Example (values are separated by a ,):\nterraform import random_integer.priority 15390,1,50000",
    "position": {
      "start": {
        "line": 65,
        "column": 1,
        "offset": 2232
      },
      "end": {
        "line": 72,
        "column": 4,
        "offset": 2556
      }
    }
  }
]
â¬¤  debug     Converting snippet: '# Random integers can be imported using the result, min, and max, with an
# optional seed. This can be used to replace a config value with a value
# interpolated from the random provider without experiencing diffs.

# Example (values are separated by a ,):
terraform import random_integer.priority 15390,1,50000'
â¬¤  debug     Converting snippet: '# The following example shows how to generate a random priority
# between 1 and 50000 for a aws_alb_listener_rule resource:

resource "random_integer" "priority" {
  min = 1
  max = 50000
  keepers = {
    # Generate a new integer each time we switch to a new listener ARN
    listener_arn = var.listener_arn
  }
}

resource "aws_alb_listener_rule" "main" {
  listener_arn = random_integer.priority.keepers.listener_arn
  priority     = random_integer.priority.result

  action {
    type             = "forward"
    target_group_arn = var.target_group_arn
  }
  # ... (other aws_alb_listener_rule arguments) ...
}'
[91m[2023-08-17T14:51:02.619] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:6,32-33: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: '# Random integers can be imported using the result, min, and max, with an
# optional seed. This can be used to replace a config value with a value
# interpolated from the random provider without experiencing diffs.

# Example (values are separated by a ,):
terraform import random_integer.priority 15390,1,50000'
[91m[2023-08-17T14:51:02.636] [ERROR] default - [39mFound a reference that is unknown: ${var.target_group_arn} has reference "var.target_group_arn".The id was not found in ["aws_alb_listener_rule.main","random_integer.priority"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:02.636] [ERROR] default - [39mFound a reference that is unknown: ${var.listener_arn} has reference "var.listener_arn".The id was not found in ["aws_alb_listener_rule.main","random_integer.priority"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:02.639] [ERROR] default - [39mFound a reference that is unknown: ${var.listener_arn} has reference "var.listener_arn".The id was not found in ["aws_alb_listener_rule.main","random_integer.priority"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:02.642] [ERROR] default - [39mFound a reference that is unknown: ${var.target_group_arn} has reference "var.target_group_arn".The id was not found in ["aws_alb_listener_rule.main","random_integer.priority"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
â¬¤  debug     Converted snippet: '# The following example shows how to generate a random priority
# between 1 and 50000 for a aws_alb_listener_rule resource:

resource "random_integer" "priority" {
  min = 1
  max = 50000
  keepers = {
    # Generate a new integer each time we switch to a new listener ARN
    listener_arn = var.listener_arn
  }
}

resource "aws_alb_listener_rule" "main" {
  listener_arn = random_integer.priority.keepers.listener_arn
  priority     = random_integer.priority.result

  action {
    type             = "forward"
    target_group_arn = var.target_group_arn
  }
  # ... (other aws_alb_listener_rule arguments) ...
}' to 'import { Construct } from "constructs";
import { Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AlbListenerRule } from "./.gen/providers/aws/alb-listener-rule";
import { Integer } from "./.gen/providers/random/integer";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
    For a more precise conversion please use the --provider flag in convert.*/
    const priority = new Integer(this, "priority", {
      keepers: {
        listener_arn: listenerArn.stringValue,
      },
      max: 50000,
      min: 1,
    });
    new AlbListenerRule(this, "main", {
      action: [
        {
          target_group_arn: targetGroupArn.value,
          type: "forward",
        },
      ],
      listener_arn: Fn.lookupNested(priority, ["keepers", "listener_arn"]),
      priority: priority.result,
    });
  }
}
'
â¬¤  debug     Converting markdown document with python code snippets
â¬¤  debug     Input: 
 ---
page_title: "random_password Resource - terraform-provider-random"
subcategory: ""
description: |-
  Identical to random_string string.html with the exception that the result is treated as sensitive and, thus, not displayed in console output. Read more about sensitive data handling in the Terraform documentation https://www.terraform.io/docs/language/state/sensitive-data.html.
  This resource does use a cryptographic random number generator.
---

# random_password (Resource)

Identical to [random_string](string.html) with the exception that the result is treated as sensitive and, thus, _not_ displayed in console output. Read more about sensitive data handling in the [Terraform documentation](https://www.terraform.io/docs/language/state/sensitive-data.html).

This resource *does* use a cryptographic random number generator.

## Example Usage

```terraform
resource "random_password" "password" {
  length           = 16
  special          = true
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

resource "aws_db_instance" "example" {
  instance_class    = "db.t3.micro"
  allocated_storage = 64
  engine            = "mysql"
  username          = "someone"
  password          = random_password.password.result
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `length` (Number) The length of the string desired. The minimum value for length is 1 and, length must also be >= (`min_upper` + `min_lower` + `min_numeric` + `min_special`).

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `lower` (Boolean) Include lowercase alphabet characters in the result. Default value is `true`.
- `min_lower` (Number) Minimum number of lowercase alphabet characters in the result. Default value is `0`.
- `min_numeric` (Number) Minimum number of numeric characters in the result. Default value is `0`.
- `min_special` (Number) Minimum number of special characters in the result. Default value is `0`.
- `min_upper` (Number) Minimum number of uppercase alphabet characters in the result. Default value is `0`.
- `number` (Boolean, Deprecated) Include numeric characters in the result. Default value is `true`. **NOTE**: This is deprecated, use `numeric` instead.
- `numeric` (Boolean) Include numeric characters in the result. Default value is `true`.
- `override_special` (String) Supply your own list of special characters to use for string generation.  This overrides the default character list in the special argument.  The `special` argument must still be set to true for any overwritten characters to be used in generation.
- `special` (Boolean) Include special characters in the result. These are `!@#$%&*()-_=+[]{}<>:?`. Default value is `true`.
- `upper` (Boolean) Include uppercase alphabet characters in the result. Default value is `true`.

### Read-Only

- `bcrypt_hash` (String, Sensitive) A bcrypt hash of the generated random string. **NOTE**: If the generated random string is greater than 72 bytes in length, `bcrypt_hash` will contain a hash of the first 72 bytes.
- `id` (String) A static value used internally by Terraform, this should not be referenced in configurations.
- `result` (String, Sensitive) The generated random string.

## Import

Import is supported using the following syntax:

```shell
terraform import random_password.password securepassword
```

### Limitations of Import

Any attribute values that are specified within Terraform config will be
ignored during import and all attributes that have defaults defined within
the schema will have the default assigned.

For instance, using the following config during import:
```terraform
resource "random_password" "password" {
  length = 16
  lower  = false
}
```

Then importing the resource using `terraform import random_password.password securepassword`,
would result in the triggering of a replacement (i.e., destroy-create) during the next
`terraform apply`.

### Avoiding Replacement

If the resource were imported using `terraform import random_password.password securepassword`,
replacement could be avoided by using:

1. Attribute values that match the imported ID and defaults:

    ```terraform
    resource "random_password" "password" {
      length = 14
      lower  = true
    }
    ```


2. Attribute values that match the imported ID and omit the attributes with defaults:

    ```terraform
    resource "random_password" "password" {
      length = 14
    }
    ```


3. `ignore_changes` specifying the attributes to ignore:

    ```terraform
    resource "random_password" "password" {
      length = 16
      lower  = false

      lifecycle {
        ignore_changes = [
          length,
          lower,
        ]
      }
    }
    ```

    **NOTE** `ignore_changes` is only required until the resource is recreated after import,
    after which it will use the configuration values specified.

â„¹  info      Extracted 6 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length           = 16\n  special          = true\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nresource \"aws_db_instance\" \"example\" {\n  instance_class    = \"db.t3.micro\"\n  allocated_storage = 64\n  engine            = \"mysql\"\n  username          = \"someone\"\n  password          = random_password.password.result\n}",
    "position": {
      "start": {
        "line": 17,
        "column": 1,
        "offset": 858
      },
      "end": {
        "line": 31,
        "column": 4,
        "offset": 1229
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "terraform import random_password.password securepassword",
    "position": {
      "start": {
        "line": 64,
        "column": 1,
        "offset": 3391
      },
      "end": {
        "line": 66,
        "column": 4,
        "offset": 3460
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n}",
    "position": {
      "start": {
        "line": 75,
        "column": 1,
        "offset": 3736
      },
      "end": {
        "line": 80,
        "column": 4,
        "offset": 3825
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length = 14\n  lower  = true\n}",
    "position": {
      "start": {
        "line": 93,
        "column": 5,
        "offset": 4256
      },
      "end": {
        "line": 98,
        "column": 8,
        "offset": 4364
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length = 14\n}",
    "position": {
      "start": {
        "line": 103,
        "column": 5,
        "offset": 4458
      },
      "end": {
        "line": 107,
        "column": 8,
        "offset": 4546
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
    "position": {
      "start": {
        "line": 112,
        "column": 5,
        "offset": 4611
      },
      "end": {
        "line": 124,
        "column": 8,
        "offset": 4819
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length = 16
  lower  = false

  lifecycle {
    ignore_changes = [
      length,
      lower,
    ]
  }
}'
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length = 14
}'
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length = 14
  lower  = true
}'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length = 14
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.random.password import Password
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Password(self, "password",
            length=14
        )'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length = 14
  lower  = true
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.random.password import Password
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Password(self, "password",
            length=14,
            lower=True
        )'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length = 16
  lower  = false

  lifecycle {
    ignore_changes = [
      length,
      lower,
    ]
  }
}' to 'from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.random.password import Password
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Password(self, "password",
            length=16,
            lifecycle=TerraformResourceLifecycle(
                ignore_changes=[length, lower]
            ),
            lower=False
        )'
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length = 16
  lower  = false
}'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length = 16
  lower  = false
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.random.password import Password
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Password(self, "password",
            length=16,
            lower=False
        )'
â¬¤  debug     Converting snippet: 'terraform import random_password.password securepassword'
[91m[2023-08-17T14:51:10.325] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:1,33-34: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: 'terraform import random_password.password securepassword'
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length           = 16
  special          = true
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

resource "aws_db_instance" "example" {
  instance_class    = "db.t3.micro"
  allocated_storage = 64
  engine            = "mysql"
  username          = "someone"
  password          = random_password.password.result
}'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length           = 16
  special          = true
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

resource "aws_db_instance" "example" {
  instance_class    = "db.t3.micro"
  allocated_storage = 64
  engine            = "mysql"
  username          = "someone"
  password          = random_password.password.result
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.db_instance import DbInstance
from imports.random.password import Password
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
        #     For a more precise conversion please use the --provider flag in convert.
        password = Password(self, "password",
            length=16,
            override_special="!#$%&*()-_=+[]{}<>:?",
            special=True
        )
        DbInstance(self, "example",
            allocated_storage=64,
            engine="mysql",
            instance_class="db.t3.micro",
            password=password.result,
            username="someone"
        )'
â¬¤  debug     Converting markdown document with typescript code snippets
â¬¤  debug     Input: 
 ---
page_title: "random_password Resource - terraform-provider-random"
subcategory: ""
description: |-
  Identical to random_string string.html with the exception that the result is treated as sensitive and, thus, not displayed in console output. Read more about sensitive data handling in the Terraform documentation https://www.terraform.io/docs/language/state/sensitive-data.html.
  This resource does use a cryptographic random number generator.
---

# random_password (Resource)

Identical to [random_string](string.html) with the exception that the result is treated as sensitive and, thus, _not_ displayed in console output. Read more about sensitive data handling in the [Terraform documentation](https://www.terraform.io/docs/language/state/sensitive-data.html).

This resource *does* use a cryptographic random number generator.

## Example Usage

```terraform
resource "random_password" "password" {
  length           = 16
  special          = true
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

resource "aws_db_instance" "example" {
  instance_class    = "db.t3.micro"
  allocated_storage = 64
  engine            = "mysql"
  username          = "someone"
  password          = random_password.password.result
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `length` (Number) The length of the string desired. The minimum value for length is 1 and, length must also be >= (`min_upper` + `min_lower` + `min_numeric` + `min_special`).

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `lower` (Boolean) Include lowercase alphabet characters in the result. Default value is `true`.
- `min_lower` (Number) Minimum number of lowercase alphabet characters in the result. Default value is `0`.
- `min_numeric` (Number) Minimum number of numeric characters in the result. Default value is `0`.
- `min_special` (Number) Minimum number of special characters in the result. Default value is `0`.
- `min_upper` (Number) Minimum number of uppercase alphabet characters in the result. Default value is `0`.
- `number` (Boolean, Deprecated) Include numeric characters in the result. Default value is `true`. **NOTE**: This is deprecated, use `numeric` instead.
- `numeric` (Boolean) Include numeric characters in the result. Default value is `true`.
- `override_special` (String) Supply your own list of special characters to use for string generation.  This overrides the default character list in the special argument.  The `special` argument must still be set to true for any overwritten characters to be used in generation.
- `special` (Boolean) Include special characters in the result. These are `!@#$%&*()-_=+[]{}<>:?`. Default value is `true`.
- `upper` (Boolean) Include uppercase alphabet characters in the result. Default value is `true`.

### Read-Only

- `bcrypt_hash` (String, Sensitive) A bcrypt hash of the generated random string. **NOTE**: If the generated random string is greater than 72 bytes in length, `bcrypt_hash` will contain a hash of the first 72 bytes.
- `id` (String) A static value used internally by Terraform, this should not be referenced in configurations.
- `result` (String, Sensitive) The generated random string.

## Import

Import is supported using the following syntax:

```shell
terraform import random_password.password securepassword
```

### Limitations of Import

Any attribute values that are specified within Terraform config will be
ignored during import and all attributes that have defaults defined within
the schema will have the default assigned.

For instance, using the following config during import:
```terraform
resource "random_password" "password" {
  length = 16
  lower  = false
}
```

Then importing the resource using `terraform import random_password.password securepassword`,
would result in the triggering of a replacement (i.e., destroy-create) during the next
`terraform apply`.

### Avoiding Replacement

If the resource were imported using `terraform import random_password.password securepassword`,
replacement could be avoided by using:

1. Attribute values that match the imported ID and defaults:

    ```terraform
    resource "random_password" "password" {
      length = 14
      lower  = true
    }
    ```


2. Attribute values that match the imported ID and omit the attributes with defaults:

    ```terraform
    resource "random_password" "password" {
      length = 14
    }
    ```


3. `ignore_changes` specifying the attributes to ignore:

    ```terraform
    resource "random_password" "password" {
      length = 16
      lower  = false

      lifecycle {
        ignore_changes = [
          length,
          lower,
        ]
      }
    }
    ```

    **NOTE** `ignore_changes` is only required until the resource is recreated after import,
    after which it will use the configuration values specified.

â„¹  info      Extracted 6 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length           = 16\n  special          = true\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nresource \"aws_db_instance\" \"example\" {\n  instance_class    = \"db.t3.micro\"\n  allocated_storage = 64\n  engine            = \"mysql\"\n  username          = \"someone\"\n  password          = random_password.password.result\n}",
    "position": {
      "start": {
        "line": 17,
        "column": 1,
        "offset": 858
      },
      "end": {
        "line": 31,
        "column": 4,
        "offset": 1229
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "terraform import random_password.password securepassword",
    "position": {
      "start": {
        "line": 64,
        "column": 1,
        "offset": 3391
      },
      "end": {
        "line": 66,
        "column": 4,
        "offset": 3460
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n}",
    "position": {
      "start": {
        "line": 75,
        "column": 1,
        "offset": 3736
      },
      "end": {
        "line": 80,
        "column": 4,
        "offset": 3825
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length = 14\n  lower  = true\n}",
    "position": {
      "start": {
        "line": 93,
        "column": 5,
        "offset": 4256
      },
      "end": {
        "line": 98,
        "column": 8,
        "offset": 4364
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length = 14\n}",
    "position": {
      "start": {
        "line": 103,
        "column": 5,
        "offset": 4458
      },
      "end": {
        "line": 107,
        "column": 8,
        "offset": 4546
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
    "position": {
      "start": {
        "line": 112,
        "column": 5,
        "offset": 4611
      },
      "end": {
        "line": 124,
        "column": 8,
        "offset": 4819
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length = 16
  lower  = false

  lifecycle {
    ignore_changes = [
      length,
      lower,
    ]
  }
}'
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length = 14
}'
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length = 14
  lower  = true
}'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length = 14
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Password } from "./.gen/providers/random/password";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Password(this, "password", {
      length: 14,
    });
  }
}
'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length = 14
  lower  = true
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Password } from "./.gen/providers/random/password";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Password(this, "password", {
      length: 14,
      lower: true,
    });
  }
}
'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length = 16
  lower  = false

  lifecycle {
    ignore_changes = [
      length,
      lower,
    ]
  }
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Password } from "./.gen/providers/random/password";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Password(this, "password", {
      length: 16,
      lifecycle: {
        ignoreChanges: [length, lower],
      },
      lower: false,
    });
  }
}
'
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length = 16
  lower  = false
}'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length = 16
  lower  = false
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Password } from "./.gen/providers/random/password";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Password(this, "password", {
      length: 16,
      lower: false,
    });
  }
}
'
â¬¤  debug     Converting snippet: 'terraform import random_password.password securepassword'
[91m[2023-08-17T14:51:12.320] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:1,33-34: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: 'terraform import random_password.password securepassword'
â¬¤  debug     Converting snippet: 'resource "random_password" "password" {
  length           = 16
  special          = true
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

resource "aws_db_instance" "example" {
  instance_class    = "db.t3.micro"
  allocated_storage = 64
  engine            = "mysql"
  username          = "someone"
  password          = random_password.password.result
}'
â¬¤  debug     Converted snippet: 'resource "random_password" "password" {
  length           = 16
  special          = true
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

resource "aws_db_instance" "example" {
  instance_class    = "db.t3.micro"
  allocated_storage = 64
  engine            = "mysql"
  username          = "someone"
  password          = random_password.password.result
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DbInstance } from "./.gen/providers/aws/db-instance";
import { Password } from "./.gen/providers/random/password";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
    For a more precise conversion please use the --provider flag in convert.*/
    const password = new Password(this, "password", {
      length: 16,
      overrideSpecial: "!#$%&*()-_=+[]{}<>:?",
      special: true,
    });
    new DbInstance(this, "example", {
      allocated_storage: 64,
      engine: "mysql",
      instance_class: "db.t3.micro",
      password: password.result,
      username: "someone",
    });
  }
}
'
â¬¤  debug     Converting markdown document with python code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_pet Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_pet generates random pet names that are intended to be used as unique identifiers for other resources.
  This resource can be used in conjunction with resources that have the create_before_destroy lifecycle flag set, to avoid conflicts with unique names during the brief period where both the old and new resources exist concurrently.
---

# random_pet (Resource)

The resource `random_pet` generates random pet names that are intended to be used as unique identifiers for other resources.

This resource can be used in conjunction with resources that have the `create_before_destroy` lifecycle flag set, to avoid conflicts with unique names during the brief period where both the old and new resources exist concurrently.

## Example Usage

```terraform
# The following example shows how to generate a unique pet name
# for an AWS EC2 instance that changes each time a new AMI id is
# selected.

resource "random_pet" "server" {
  keepers = {
    # Generate a new pet name each time we switch to a new AMI id
    ami_id = var.ami_id
  }
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server-${random_pet.server.id}"
  }

  # Read the AMI id "through" the random_pet resource to ensure that
  # both will change together.
  ami = random_pet.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `length` (Number) The length (in words) of the pet name. Defaults to 2
- `prefix` (String) A string to prefix the name with.
- `separator` (String) The character to separate words in the pet name. Defaults to "-"

### Read-Only

- `id` (String) The random pet name.

â„¹  info      Extracted 1 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "# The following example shows how to generate a unique pet name\n# for an AWS EC2 instance that changes each time a new AMI id is\n# selected.\n\nresource \"random_pet\" \"server\" {\n  keepers = {\n    # Generate a new pet name each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server-${random_pet.server.id}\"\n  }\n\n  # Read the AMI id \"through\" the random_pet resource to ensure that\n  # both will change together.\n  ami = random_pet.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
    "position": {
      "start": {
        "line": 18,
        "column": 1,
        "offset": 928
      },
      "end": {
        "line": 41,
        "column": 4,
        "offset": 1516
      }
    }
  }
]
â¬¤  debug     Converting snippet: '# The following example shows how to generate a unique pet name
# for an AWS EC2 instance that changes each time a new AMI id is
# selected.

resource "random_pet" "server" {
  keepers = {
    # Generate a new pet name each time we switch to a new AMI id
    ami_id = var.ami_id
  }
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server-${random_pet.server.id}"
  }

  # Read the AMI id "through" the random_pet resource to ensure that
  # both will change together.
  ami = random_pet.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}'
[91m[2023-08-17T14:51:12.377] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_pet.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:12.378] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_pet.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
â¬¤  debug     Converted snippet: '# The following example shows how to generate a unique pet name
# for an AWS EC2 instance that changes each time a new AMI id is
# selected.

resource "random_pet" "server" {
  keepers = {
    # Generate a new pet name each time we switch to a new AMI id
    ami_id = var.ami_id
  }
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server-${random_pet.server.id}"
  }

  # Read the AMI id "through" the random_pet resource to ensure that
  # both will change together.
  ami = random_pet.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}' to 'from constructs import Construct
from cdktf import Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.instance import Instance
from imports.random.pet import Pet
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
        #     For a more precise conversion please use the --provider flag in convert.
        server = Pet(self, "server",
            keepers={
                "ami_id": ami_id.string_value
            }
        )
        aws_instance_server = Instance(self, "server_1",
            ami=Fn.lookup_nested(server, ["keepers", "ami_id"]),
            tags={
                "Name": "web-server-${" + server.id + "}"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_instance_server.override_logical_id("server")'
â¬¤  debug     Converting markdown document with typescript code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_pet Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_pet generates random pet names that are intended to be used as unique identifiers for other resources.
  This resource can be used in conjunction with resources that have the create_before_destroy lifecycle flag set, to avoid conflicts with unique names during the brief period where both the old and new resources exist concurrently.
---

# random_pet (Resource)

The resource `random_pet` generates random pet names that are intended to be used as unique identifiers for other resources.

This resource can be used in conjunction with resources that have the `create_before_destroy` lifecycle flag set, to avoid conflicts with unique names during the brief period where both the old and new resources exist concurrently.

## Example Usage

```terraform
# The following example shows how to generate a unique pet name
# for an AWS EC2 instance that changes each time a new AMI id is
# selected.

resource "random_pet" "server" {
  keepers = {
    # Generate a new pet name each time we switch to a new AMI id
    ami_id = var.ami_id
  }
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server-${random_pet.server.id}"
  }

  # Read the AMI id "through" the random_pet resource to ensure that
  # both will change together.
  ami = random_pet.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `length` (Number) The length (in words) of the pet name. Defaults to 2
- `prefix` (String) A string to prefix the name with.
- `separator` (String) The character to separate words in the pet name. Defaults to "-"

### Read-Only

- `id` (String) The random pet name.

â„¹  info      Extracted 1 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "# The following example shows how to generate a unique pet name\n# for an AWS EC2 instance that changes each time a new AMI id is\n# selected.\n\nresource \"random_pet\" \"server\" {\n  keepers = {\n    # Generate a new pet name each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server-${random_pet.server.id}\"\n  }\n\n  # Read the AMI id \"through\" the random_pet resource to ensure that\n  # both will change together.\n  ami = random_pet.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
    "position": {
      "start": {
        "line": 18,
        "column": 1,
        "offset": 928
      },
      "end": {
        "line": 41,
        "column": 4,
        "offset": 1516
      }
    }
  }
]
â¬¤  debug     Converting snippet: '# The following example shows how to generate a unique pet name
# for an AWS EC2 instance that changes each time a new AMI id is
# selected.

resource "random_pet" "server" {
  keepers = {
    # Generate a new pet name each time we switch to a new AMI id
    ami_id = var.ami_id
  }
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server-${random_pet.server.id}"
  }

  # Read the AMI id "through" the random_pet resource to ensure that
  # both will change together.
  ami = random_pet.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}'
[91m[2023-08-17T14:51:14.308] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_pet.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:14.309] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_pet.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
â¬¤  debug     Converted snippet: '# The following example shows how to generate a unique pet name
# for an AWS EC2 instance that changes each time a new AMI id is
# selected.

resource "random_pet" "server" {
  keepers = {
    # Generate a new pet name each time we switch to a new AMI id
    ami_id = var.ami_id
  }
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server-${random_pet.server.id}"
  }

  # Read the AMI id "through" the random_pet resource to ensure that
  # both will change together.
  ami = random_pet.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}' to 'import { Construct } from "constructs";
import { Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { Pet } from "./.gen/providers/random/pet";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
    For a more precise conversion please use the --provider flag in convert.*/
    const server = new Pet(this, "server", {
      keepers: {
        ami_id: amiId.stringValue,
      },
    });
    const awsInstanceServer = new Instance(this, "server_1", {
      ami: Fn.lookupNested(server, ["keepers", "ami_id"]),
      tags: {
        Name: "web-server-${" + server.id + "}",
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsInstanceServer.overrideLogicalId("server");
  }
}
'
â¬¤  debug     Converting markdown document with python code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_shuffle Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_shuffle generates a random permutation of a list of strings given as an argument.
---

# random_shuffle (Resource)

The resource `random_shuffle` generates a random permutation of a list of strings given as an argument.

## Example Usage

```terraform
resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `input` (List of String) The list of strings to shuffle.

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `result_count` (Number) The number of results to return. Defaults to the number of items in the `input` list. If fewer items are requested, some elements will be excluded from the result. If more items are requested, items will be repeated in the result but not more frequently than the number of items in the input list.
- `seed` (String) Arbitrary string with which to seed the random number generator, in order to produce less-volatile permutations of the list.

**Important:** Even with an identical seed, it is not guaranteed that the same permutation will be produced across different versions of Terraform. This argument causes the result to be *less volatile*, but not fixed for all time.

### Read-Only

- `id` (String) A static value used internally by Terraform, this should not be referenced in configurations.
- `result` (List of String) Random permutation of the list of strings given in `input`.

â„¹  info      Extracted 1 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
    "position": {
      "start": {
        "line": 15,
        "column": 1,
        "offset": 429
      },
      "end": {
        "line": 28,
        "column": 4,
        "offset": 782
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}'
â¬¤  debug     Converted snippet: 'resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.elb import Elb
from imports.random.shuffle import Shuffle
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
        #     For a more precise conversion please use the --provider flag in convert.
        az = Shuffle(self, "az",
            input=["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"],
            result_count=2
        )
        Elb(self, "example",
            availability_zones=az.result
        )'
â¬¤  debug     Converting markdown document with typescript code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_shuffle Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_shuffle generates a random permutation of a list of strings given as an argument.
---

# random_shuffle (Resource)

The resource `random_shuffle` generates a random permutation of a list of strings given as an argument.

## Example Usage

```terraform
resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `input` (List of String) The list of strings to shuffle.

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `result_count` (Number) The number of results to return. Defaults to the number of items in the `input` list. If fewer items are requested, some elements will be excluded from the result. If more items are requested, items will be repeated in the result but not more frequently than the number of items in the input list.
- `seed` (String) Arbitrary string with which to seed the random number generator, in order to produce less-volatile permutations of the list.

**Important:** Even with an identical seed, it is not guaranteed that the same permutation will be produced across different versions of Terraform. This argument causes the result to be *less volatile*, but not fixed for all time.

### Read-Only

- `id` (String) A static value used internally by Terraform, this should not be referenced in configurations.
- `result` (List of String) Random permutation of the list of strings given in `input`.

â„¹  info      Extracted 1 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
    "position": {
      "start": {
        "line": 15,
        "column": 1,
        "offset": 429
      },
      "end": {
        "line": 28,
        "column": 4,
        "offset": 782
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}'
â¬¤  debug     Converted snippet: 'resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Elb } from "./.gen/providers/aws/elb";
import { Shuffle } from "./.gen/providers/random/shuffle";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
    For a more precise conversion please use the --provider flag in convert.*/
    const az = new Shuffle(this, "az", {
      input: ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"],
      resultCount: 2,
    });
    new Elb(this, "example", {
      availability_zones: az.result,
    });
  }
}
'
â¬¤  debug     Converting markdown document with python code snippets
â¬¤  debug     Input: 
 ---
page_title: "random_string Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_string generates a random permutation of alphanumeric characters and optionally special characters.
  This resource does use a cryptographic random number generator.
  Historically this resource's intended usage has been ambiguous as the original example used it in a password. For backwards compatibility it will continue to exist. For unique ids please use random_id id.html, for sensitive random values please use random_password password.html.
---

# random_string (Resource)

The resource `random_string` generates a random permutation of alphanumeric characters and optionally special characters.

This resource *does* use a cryptographic random number generator.

Historically this resource's intended usage has been ambiguous as the original example used it in a password. For backwards compatibility it will continue to exist. For unique ids please use [random_id](id.html), for sensitive random values please use [random_password](password.html).

## Example Usage

```terraform
resource "random_string" "random" {
  length           = 16
  special          = true
  override_special = "/@Â£$"
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `length` (Number) The length of the string desired. The minimum value for length is 1 and, length must also be >= (`min_upper` + `min_lower` + `min_numeric` + `min_special`).

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `lower` (Boolean) Include lowercase alphabet characters in the result. Default value is `true`.
- `min_lower` (Number) Minimum number of lowercase alphabet characters in the result. Default value is `0`.
- `min_numeric` (Number) Minimum number of numeric characters in the result. Default value is `0`.
- `min_special` (Number) Minimum number of special characters in the result. Default value is `0`.
- `min_upper` (Number) Minimum number of uppercase alphabet characters in the result. Default value is `0`.
- `number` (Boolean, Deprecated) Include numeric characters in the result. Default value is `true`. **NOTE**: This is deprecated, use `numeric` instead.
- `numeric` (Boolean) Include numeric characters in the result. Default value is `true`.
- `override_special` (String) Supply your own list of special characters to use for string generation.  This overrides the default character list in the special argument.  The `special` argument must still be set to true for any overwritten characters to be used in generation.
- `special` (Boolean) Include special characters in the result. These are `!@#$%&*()-_=+[]{}<>:?`. Default value is `true`.
- `upper` (Boolean) Include uppercase alphabet characters in the result. Default value is `true`.

### Read-Only

- `id` (String) The generated random string.
- `result` (String) The generated random string.

## Import

Import is supported using the following syntax:

```shell
terraform import random_string.test test
```

### Limitations of Import

Any attribute values that are specified within Terraform config will be
ignored during import and all attributes that have defaults defined within
the schema will have the default assigned.

For instance, using the following config during import:
```terraform
resource "random_string" "test" {
  length = 16
  lower  = false
}
```

Then importing the resource using `terraform import random_string.test test`,
would result in the triggering of a replacement (i.e., destroy-create) during
the next `terraform apply`.

### Avoiding Replacement

If the resource were imported using `terraform import random_string.test test`,
replacement can be avoided by using:

1. Attribute values that match the imported ID and defaults:
    ```terraform
    resource "random_string" "test" {
      length = 4
      lower  = true
    }
    ```

2. Attribute values that match the imported ID and omit the attributes with defaults:
    ```terraform
    resource "random_string" "test" {
      length = 4
    }
    ```

3. `ignore_changes` specifying the attributes to ignore:
    ```terraform
    resource "random_string" "test" {
      length = 16
      lower  = false

      lifecycle {
        ignore_changes = [
          length,
          lower,
        ]
      }
    }
    ```

    **NOTE** `ignore_changes` is only required until the resource is recreated after import,
    after which it will use the configuration values specified.
â„¹  info      Extracted 6 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"random\" {\n  length           = 16\n  special          = true\n  override_special = \"/@Â£$\"\n}",
    "position": {
      "start": {
        "line": 20,
        "column": 1,
        "offset": 1099
      },
      "end": {
        "line": 26,
        "column": 4,
        "offset": 1231
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "terraform import random_string.test test",
    "position": {
      "start": {
        "line": 58,
        "column": 1,
        "offset": 3101
      },
      "end": {
        "line": 60,
        "column": 4,
        "offset": 3154
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n}",
    "position": {
      "start": {
        "line": 69,
        "column": 1,
        "offset": 3430
      },
      "end": {
        "line": 74,
        "column": 4,
        "offset": 3513
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"test\" {\n  length = 4\n  lower  = true\n}",
    "position": {
      "start": {
        "line": 86,
        "column": 5,
        "offset": 3909
      },
      "end": {
        "line": 91,
        "column": 8,
        "offset": 4010
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"test\" {\n  length = 4\n}",
    "position": {
      "start": {
        "line": 94,
        "column": 5,
        "offset": 4102
      },
      "end": {
        "line": 98,
        "column": 8,
        "offset": 4183
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
    "position": {
      "start": {
        "line": 101,
        "column": 5,
        "offset": 4246
      },
      "end": {
        "line": 113,
        "column": 8,
        "offset": 4448
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_string" "test" {
  length = 16
  lower  = false

  lifecycle {
    ignore_changes = [
      length,
      lower,
    ]
  }
}'
â¬¤  debug     Converting snippet: 'resource "random_string" "test" {
  length = 4
}'
â¬¤  debug     Converting snippet: 'resource "random_string" "test" {
  length = 4
  lower  = true
}'
â¬¤  debug     Converted snippet: 'resource "random_string" "test" {
  length = 4
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.random.string_resource import StringResource
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        StringResource(self, "test",
            length=4
        )'
â¬¤  debug     Converted snippet: 'resource "random_string" "test" {
  length = 4
  lower  = true
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.random.string_resource import StringResource
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        StringResource(self, "test",
            length=4,
            lower=True
        )'
â¬¤  debug     Converted snippet: 'resource "random_string" "test" {
  length = 16
  lower  = false

  lifecycle {
    ignore_changes = [
      length,
      lower,
    ]
  }
}' to 'from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.random.string_resource import StringResource
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        StringResource(self, "test",
            length=16,
            lifecycle=TerraformResourceLifecycle(
                ignore_changes=[length, lower]
            ),
            lower=False
        )'
â¬¤  debug     Converting snippet: 'resource "random_string" "test" {
  length = 16
  lower  = false
}'
â¬¤  debug     Converted snippet: 'resource "random_string" "test" {
  length = 16
  lower  = false
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.random.string_resource import StringResource
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        StringResource(self, "test",
            length=16,
            lower=False
        )'
â¬¤  debug     Converting snippet: 'terraform import random_string.test test'
[91m[2023-08-17T14:51:23.611] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:1,31-32: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: 'terraform import random_string.test test'
â¬¤  debug     Converting snippet: 'resource "random_string" "random" {
  length           = 16
  special          = true
  override_special = "/@Â£$"
}'
â¬¤  debug     Converted snippet: 'resource "random_string" "random" {
  length           = 16
  special          = true
  override_special = "/@Â£$"
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.random.string_resource import StringResource
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        StringResource(self, "random",
            length=16,
            override_special="/@Â£$",
            special=True
        )'
â¬¤  debug     Converting markdown document with typescript code snippets
â¬¤  debug     Input: 
 ---
page_title: "random_string Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_string generates a random permutation of alphanumeric characters and optionally special characters.
  This resource does use a cryptographic random number generator.
  Historically this resource's intended usage has been ambiguous as the original example used it in a password. For backwards compatibility it will continue to exist. For unique ids please use random_id id.html, for sensitive random values please use random_password password.html.
---

# random_string (Resource)

The resource `random_string` generates a random permutation of alphanumeric characters and optionally special characters.

This resource *does* use a cryptographic random number generator.

Historically this resource's intended usage has been ambiguous as the original example used it in a password. For backwards compatibility it will continue to exist. For unique ids please use [random_id](id.html), for sensitive random values please use [random_password](password.html).

## Example Usage

```terraform
resource "random_string" "random" {
  length           = 16
  special          = true
  override_special = "/@Â£$"
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `length` (Number) The length of the string desired. The minimum value for length is 1 and, length must also be >= (`min_upper` + `min_lower` + `min_numeric` + `min_special`).

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `lower` (Boolean) Include lowercase alphabet characters in the result. Default value is `true`.
- `min_lower` (Number) Minimum number of lowercase alphabet characters in the result. Default value is `0`.
- `min_numeric` (Number) Minimum number of numeric characters in the result. Default value is `0`.
- `min_special` (Number) Minimum number of special characters in the result. Default value is `0`.
- `min_upper` (Number) Minimum number of uppercase alphabet characters in the result. Default value is `0`.
- `number` (Boolean, Deprecated) Include numeric characters in the result. Default value is `true`. **NOTE**: This is deprecated, use `numeric` instead.
- `numeric` (Boolean) Include numeric characters in the result. Default value is `true`.
- `override_special` (String) Supply your own list of special characters to use for string generation.  This overrides the default character list in the special argument.  The `special` argument must still be set to true for any overwritten characters to be used in generation.
- `special` (Boolean) Include special characters in the result. These are `!@#$%&*()-_=+[]{}<>:?`. Default value is `true`.
- `upper` (Boolean) Include uppercase alphabet characters in the result. Default value is `true`.

### Read-Only

- `id` (String) The generated random string.
- `result` (String) The generated random string.

## Import

Import is supported using the following syntax:

```shell
terraform import random_string.test test
```

### Limitations of Import

Any attribute values that are specified within Terraform config will be
ignored during import and all attributes that have defaults defined within
the schema will have the default assigned.

For instance, using the following config during import:
```terraform
resource "random_string" "test" {
  length = 16
  lower  = false
}
```

Then importing the resource using `terraform import random_string.test test`,
would result in the triggering of a replacement (i.e., destroy-create) during
the next `terraform apply`.

### Avoiding Replacement

If the resource were imported using `terraform import random_string.test test`,
replacement can be avoided by using:

1. Attribute values that match the imported ID and defaults:
    ```terraform
    resource "random_string" "test" {
      length = 4
      lower  = true
    }
    ```

2. Attribute values that match the imported ID and omit the attributes with defaults:
    ```terraform
    resource "random_string" "test" {
      length = 4
    }
    ```

3. `ignore_changes` specifying the attributes to ignore:
    ```terraform
    resource "random_string" "test" {
      length = 16
      lower  = false

      lifecycle {
        ignore_changes = [
          length,
          lower,
        ]
      }
    }
    ```

    **NOTE** `ignore_changes` is only required until the resource is recreated after import,
    after which it will use the configuration values specified.
â„¹  info      Extracted 6 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"random\" {\n  length           = 16\n  special          = true\n  override_special = \"/@Â£$\"\n}",
    "position": {
      "start": {
        "line": 20,
        "column": 1,
        "offset": 1099
      },
      "end": {
        "line": 26,
        "column": 4,
        "offset": 1231
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "terraform import random_string.test test",
    "position": {
      "start": {
        "line": 58,
        "column": 1,
        "offset": 3101
      },
      "end": {
        "line": 60,
        "column": 4,
        "offset": 3154
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n}",
    "position": {
      "start": {
        "line": 69,
        "column": 1,
        "offset": 3430
      },
      "end": {
        "line": 74,
        "column": 4,
        "offset": 3513
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"test\" {\n  length = 4\n  lower  = true\n}",
    "position": {
      "start": {
        "line": 86,
        "column": 5,
        "offset": 3909
      },
      "end": {
        "line": 91,
        "column": 8,
        "offset": 4010
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"test\" {\n  length = 4\n}",
    "position": {
      "start": {
        "line": 94,
        "column": 5,
        "offset": 4102
      },
      "end": {
        "line": 98,
        "column": 8,
        "offset": 4183
      }
    }
  },
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
    "position": {
      "start": {
        "line": 101,
        "column": 5,
        "offset": 4246
      },
      "end": {
        "line": 113,
        "column": 8,
        "offset": 4448
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_string" "test" {
  length = 16
  lower  = false

  lifecycle {
    ignore_changes = [
      length,
      lower,
    ]
  }
}'
â¬¤  debug     Converting snippet: 'resource "random_string" "test" {
  length = 4
}'
â¬¤  debug     Converting snippet: 'resource "random_string" "test" {
  length = 4
  lower  = true
}'
â¬¤  debug     Converted snippet: 'resource "random_string" "test" {
  length = 4
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { StringResource } from "./.gen/providers/random/string-resource";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new StringResource(this, "test", {
      length: 4,
    });
  }
}
'
â¬¤  debug     Converted snippet: 'resource "random_string" "test" {
  length = 4
  lower  = true
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { StringResource } from "./.gen/providers/random/string-resource";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new StringResource(this, "test", {
      length: 4,
      lower: true,
    });
  }
}
'
â¬¤  debug     Converted snippet: 'resource "random_string" "test" {
  length = 16
  lower  = false

  lifecycle {
    ignore_changes = [
      length,
      lower,
    ]
  }
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { StringResource } from "./.gen/providers/random/string-resource";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new StringResource(this, "test", {
      length: 16,
      lifecycle: {
        ignoreChanges: [length, lower],
      },
      lower: false,
    });
  }
}
'
â¬¤  debug     Converting snippet: 'resource "random_string" "test" {
  length = 16
  lower  = false
}'
â¬¤  debug     Converted snippet: 'resource "random_string" "test" {
  length = 16
  lower  = false
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { StringResource } from "./.gen/providers/random/string-resource";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new StringResource(this, "test", {
      length: 16,
      lower: false,
    });
  }
}
'
â¬¤  debug     Converting snippet: 'terraform import random_string.test test'
[91m[2023-08-17T14:51:25.528] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:1,31-32: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: 'terraform import random_string.test test'
â¬¤  debug     Converting snippet: 'resource "random_string" "random" {
  length           = 16
  special          = true
  override_special = "/@Â£$"
}'
â¬¤  debug     Converted snippet: 'resource "random_string" "random" {
  length           = 16
  special          = true
  override_special = "/@Â£$"
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { StringResource } from "./.gen/providers/random/string-resource";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new StringResource(this, "random", {
      length: 16,
      overrideSpecial: "/@\xA3$",
      special: true,
    });
  }
}
'
â¬¤  debug     Converting markdown document with python code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_uuid Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_uuid generates a random uuid string that is intended to be used as a unique identifier for other resources.
  This resource uses hashicorp/go-uuid https://github.com/hashicorp/go-uuid to generate a UUID-formatted string for use with services needing a unique string identifier.
---

# random_uuid (Resource)

The resource `random_uuid` generates a random uuid string that is intended to be used as a unique identifier for other resources.

This resource uses [hashicorp/go-uuid](https://github.com/hashicorp/go-uuid) to generate a UUID-formatted string for use with services needing a unique string identifier.

## Example Usage

```terraform
# The following example shows how to generate a unique name for an Azure Resource Group.

resource "random_uuid" "test" {
}

resource "azurerm_resource_group" "test" {
  name     = "${random_uuid.test.result}-rg"
  location = "Central US"
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.

### Read-Only

- `id` (String) The generated uuid presented in string format.
- `result` (String) The generated uuid presented in string format.

## Import

Import is supported using the following syntax:

```shell
# Random UUID's can be imported. This can be used to replace a config
# value with a value interpolated from the random provider without
# experiencing diffs.

terraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899
```

â„¹  info      Extracted 2 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "# The following example shows how to generate a unique name for an Azure Resource Group.\n\nresource \"random_uuid\" \"test\" {\n}\n\nresource \"azurerm_resource_group\" \"test\" {\n  name     = \"${random_uuid.test.result}-rg\"\n  location = \"Central US\"\n}",
    "position": {
      "start": {
        "line": 18,
        "column": 1,
        "offset": 817
      },
      "end": {
        "line": 28,
        "column": 4,
        "offset": 1074
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "# Random UUID's can be imported. This can be used to replace a config\n# value with a value interpolated from the random provider without\n# experiencing diffs.\n\nterraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899",
    "position": {
      "start": {
        "line": 46,
        "column": 1,
        "offset": 1534
      },
      "end": {
        "line": 52,
        "column": 4,
        "offset": 1777
      }
    }
  }
]
â¬¤  debug     Converting snippet: '# Random UUID's can be imported. This can be used to replace a config
# value with a value interpolated from the random provider without
# experiencing diffs.

terraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899'
â¬¤  debug     Converting snippet: '# The following example shows how to generate a unique name for an Azure Resource Group.

resource "random_uuid" "test" {
}

resource "azurerm_resource_group" "test" {
  name     = "${random_uuid.test.result}-rg"
  location = "Central US"
}'
[91m[2023-08-17T14:51:25.567] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:5,29-30: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: '# Random UUID's can be imported. This can be used to replace a config
# value with a value interpolated from the random provider without
# experiencing diffs.

terraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899'
â¬¤  debug     Converted snippet: '# The following example shows how to generate a unique name for an Azure Resource Group.

resource "random_uuid" "test" {
}

resource "azurerm_resource_group" "test" {
  name     = "${random_uuid.test.result}-rg"
  location = "Central US"
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.azurerm.resource_group import ResourceGroup
from imports.random.uuid import Uuid
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: azurerm.
        #     For a more precise conversion please use the --provider flag in convert.
        test = Uuid(self, "test")
        azurerm_resource_group_test = ResourceGroup(self, "test_1",
            location="Central US",
            name="${" + test.result + "}-rg"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        azurerm_resource_group_test.override_logical_id("test")'
â¬¤  debug     Converting markdown document with typescript code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_uuid Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_uuid generates a random uuid string that is intended to be used as a unique identifier for other resources.
  This resource uses hashicorp/go-uuid https://github.com/hashicorp/go-uuid to generate a UUID-formatted string for use with services needing a unique string identifier.
---

# random_uuid (Resource)

The resource `random_uuid` generates a random uuid string that is intended to be used as a unique identifier for other resources.

This resource uses [hashicorp/go-uuid](https://github.com/hashicorp/go-uuid) to generate a UUID-formatted string for use with services needing a unique string identifier.

## Example Usage

```terraform
# The following example shows how to generate a unique name for an Azure Resource Group.

resource "random_uuid" "test" {
}

resource "azurerm_resource_group" "test" {
  name     = "${random_uuid.test.result}-rg"
  location = "Central US"
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.

### Read-Only

- `id` (String) The generated uuid presented in string format.
- `result` (String) The generated uuid presented in string format.

## Import

Import is supported using the following syntax:

```shell
# Random UUID's can be imported. This can be used to replace a config
# value with a value interpolated from the random provider without
# experiencing diffs.

terraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899
```

â„¹  info      Extracted 2 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "# The following example shows how to generate a unique name for an Azure Resource Group.\n\nresource \"random_uuid\" \"test\" {\n}\n\nresource \"azurerm_resource_group\" \"test\" {\n  name     = \"${random_uuid.test.result}-rg\"\n  location = \"Central US\"\n}",
    "position": {
      "start": {
        "line": 18,
        "column": 1,
        "offset": 817
      },
      "end": {
        "line": 28,
        "column": 4,
        "offset": 1074
      }
    }
  },
  {
    "type": "code",
    "lang": "shell",
    "meta": null,
    "value": "# Random UUID's can be imported. This can be used to replace a config\n# value with a value interpolated from the random provider without\n# experiencing diffs.\n\nterraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899",
    "position": {
      "start": {
        "line": 46,
        "column": 1,
        "offset": 1534
      },
      "end": {
        "line": 52,
        "column": 4,
        "offset": 1777
      }
    }
  }
]
â¬¤  debug     Converting snippet: '# Random UUID's can be imported. This can be used to replace a config
# value with a value interpolated from the random provider without
# experiencing diffs.

terraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899'
â¬¤  debug     Converting snippet: '# The following example shows how to generate a unique name for an Azure Resource Group.

resource "random_uuid" "test" {
}

resource "azurerm_resource_group" "test" {
  name     = "${random_uuid.test.result}-rg"
  location = "Central US"
}'
[91m[2023-08-17T14:51:27.429] [ERROR] default - [39mFailed to parse HCL: Error: parse config: [terraform.tf:5,29-30: Invalid block definition; Either a quoted string block label or an opening brace ("{") is expected here.]
â¬¤  debug     Failed conversion for snippet, skipping: '# Random UUID's can be imported. This can be used to replace a config
# value with a value interpolated from the random provider without
# experiencing diffs.

terraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899'
â¬¤  debug     Converted snippet: '# The following example shows how to generate a unique name for an Azure Resource Group.

resource "random_uuid" "test" {
}

resource "azurerm_resource_group" "test" {
  name     = "${random_uuid.test.result}-rg"
  location = "Central US"
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ResourceGroup } from "./.gen/providers/azurerm/resource-group";
import { Uuid } from "./.gen/providers/random/uuid";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azurerm.
    For a more precise conversion please use the --provider flag in convert.*/
    const test = new Uuid(this, "test", {});
    const azurermResourceGroupTest = new ResourceGroup(this, "test_1", {
      location: "Central US",
      name: "${" + test.result + "}-rg",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    azurermResourceGroupTest.overrideLogicalId("test");
  }
}
'
â¬¤  debug     Converting markdown document with python code snippets
â¬¤  debug     Input: 
 ---
page_title: "Provider: Random"
description: |-
  The Random provider is used to generate randomness.
---

# Random Provider

The "random" provider allows the use of randomness within Terraform
configurations. This is a *logical provider*, which means that it works
entirely within Terraform's logic, and doesn't interact with any other
services.

Unconstrained randomness within a Terraform configuration would not be very
useful, since Terraform's goal is to converge on a fixed configuration by
applying a diff. Because of this, the "random" provider provides an idea of
*managed randomness*: it provides resources that generate random values during
their creation and then hold those values steady until the inputs are changed.

Even with these resources, it is advisable to keep the use of randomness within
Terraform configuration to a minimum, and retain it for special cases only;
Terraform works best when the configuration is well-defined, since its behavior
can then be more readily predicted.

Unless otherwise stated within the documentation of a specific resource, this
provider's results are **not** sufficiently random for cryptographic use.

For more information on the specific resources available, see the links in the
navigation bar. Read on for information on the general patterns that apply
to this provider's resources.

## Resource "Keepers"

As noted above, the random resources generate randomness only when they are
created; the results produced are stored in the Terraform state and re-used
until the inputs change, prompting the resource to be recreated.

The resources all provide a map argument called `keepers` that can be populated
with arbitrary key/value pairs that should be selected such that they remain
the same until new random values are desired.

For example:

```terraform
resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}
```

Resource "keepers" are optional. The other arguments to each resource must
*also* remain constant in order to retain a random result.

`keepers` are *not* treated as sensitive attributes; a value used for `keepers` will be displayed in Terraform UI output as plaintext.

To force a random result to be replaced, the `taint` command can be used to
produce a new result on the next run.
â„¹  info      Extracted 1 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
    "position": {
      "start": {
        "line": 44,
        "column": 1,
        "offset": 1806
      },
      "end": {
        "line": 65,
        "column": 4,
        "offset": 2262
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}'
[91m[2023-08-17T14:51:27.478] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_id.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:27.479] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_id.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
â¬¤  debug     Converted snippet: 'resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}' to 'from constructs import Construct
from cdktf import Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.instance import Instance
from imports.random.id import Id
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
        #     For a more precise conversion please use the --provider flag in convert.
        server = Id(self, "server",
            byte_length=8,
            keepers={
                "ami_id": ami_id.string_value
            }
        )
        aws_instance_server = Instance(self, "server_1",
            ami=Fn.lookup_nested(server, ["keepers", "ami_id"]),
            tags={
                "Name": "web-server ${" + server.hex + "}"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_instance_server.override_logical_id("server")'
â¬¤  debug     Converting markdown document with typescript code snippets
â¬¤  debug     Input: 
 ---
page_title: "Provider: Random"
description: |-
  The Random provider is used to generate randomness.
---

# Random Provider

The "random" provider allows the use of randomness within Terraform
configurations. This is a *logical provider*, which means that it works
entirely within Terraform's logic, and doesn't interact with any other
services.

Unconstrained randomness within a Terraform configuration would not be very
useful, since Terraform's goal is to converge on a fixed configuration by
applying a diff. Because of this, the "random" provider provides an idea of
*managed randomness*: it provides resources that generate random values during
their creation and then hold those values steady until the inputs are changed.

Even with these resources, it is advisable to keep the use of randomness within
Terraform configuration to a minimum, and retain it for special cases only;
Terraform works best when the configuration is well-defined, since its behavior
can then be more readily predicted.

Unless otherwise stated within the documentation of a specific resource, this
provider's results are **not** sufficiently random for cryptographic use.

For more information on the specific resources available, see the links in the
navigation bar. Read on for information on the general patterns that apply
to this provider's resources.

## Resource "Keepers"

As noted above, the random resources generate randomness only when they are
created; the results produced are stored in the Terraform state and re-used
until the inputs change, prompting the resource to be recreated.

The resources all provide a map argument called `keepers` that can be populated
with arbitrary key/value pairs that should be selected such that they remain
the same until new random values are desired.

For example:

```terraform
resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}
```

Resource "keepers" are optional. The other arguments to each resource must
*also* remain constant in order to retain a random result.

`keepers` are *not* treated as sensitive attributes; a value used for `keepers` will be displayed in Terraform UI output as plaintext.

To force a random result to be replaced, the `taint` command can be used to
produce a new result on the next run.
â„¹  info      Extracted 1 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
    "position": {
      "start": {
        "line": 44,
        "column": 1,
        "offset": 1806
      },
      "end": {
        "line": 65,
        "column": 4,
        "offset": 2262
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}'
[91m[2023-08-17T14:51:29.270] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_id.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
[91m[2023-08-17T14:51:29.271] [ERROR] default - [39mFound a reference that is unknown: ${var.ami_id} has reference "var.ami_id".The id was not found in ["aws_instance.server","random_id.server"] with temporary values [].
Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.
â¬¤  debug     Converted snippet: 'resource "random_id" "server" {
  keepers = {
    # Generate a new id each time we switch to a new AMI id
    ami_id = var.ami_id
  }

  byte_length = 8
}

resource "aws_instance" "server" {
  tags = {
    Name = "web-server ${random_id.server.hex}"
  }

  # Read the AMI id "through" the random_id resource to ensure that
  # both will change together.
  ami = random_id.server.keepers.ami_id

  # ... (other aws_instance arguments) ...
}' to 'import { Construct } from "constructs";
import { Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { Id } from "./.gen/providers/random/id";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
    For a more precise conversion please use the --provider flag in convert.*/
    const server = new Id(this, "server", {
      byteLength: 8,
      keepers: {
        ami_id: amiId.stringValue,
      },
    });
    const awsInstanceServer = new Instance(this, "server_1", {
      ami: Fn.lookupNested(server, ["keepers", "ami_id"]),
      tags: {
        Name: "web-server ${" + server.hex + "}",
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsInstanceServer.overrideLogicalId("server");
  }
}
'
ðŸ“‹  report    {
  "files": [
    "index.md",
    "resources/uuid.md",
    "resources/string.md",
    "resources/shuffle.md",
    "resources/pet.md",
    "resources/password.md",
    "resources/integer.md",
    "resources/id.md"
  ],
  "snippets": [
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique name for an AWS EC2\n# instance that changes each time a new AMI id is selected.\n\nresource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 35,
          "column": 1,
          "offset": 1393
        },
        "end": {
          "line": 59,
          "column": 4,
          "offset": 1985
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random IDs can be imported using the b64_url with an optional prefix. This\n# can be used to replace a config value with a value interpolated from the\n# random provider without experiencing diffs.\n\n# Example with no prefix:\nterraform import random_id.server p-9hUg\n\n# Example with prefix (prefix is separated by a ,):\n$ terraform import random_id.server my-prefix-,p-9hUg",
      "position": {
        "start": {
          "line": 85,
          "column": 1,
          "offset": 3195
        },
        "end": {
          "line": 95,
          "column": 4,
          "offset": 3580
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique name for an AWS EC2\n# instance that changes each time a new AMI id is selected.\n\nresource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 35,
          "column": 1,
          "offset": 1393
        },
        "end": {
          "line": 59,
          "column": 4,
          "offset": 1985
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random IDs can be imported using the b64_url with an optional prefix. This\n# can be used to replace a config value with a value interpolated from the\n# random provider without experiencing diffs.\n\n# Example with no prefix:\nterraform import random_id.server p-9hUg\n\n# Example with prefix (prefix is separated by a ,):\n$ terraform import random_id.server my-prefix-,p-9hUg",
      "position": {
        "start": {
          "line": 85,
          "column": 1,
          "offset": 3195
        },
        "end": {
          "line": 95,
          "column": 4,
          "offset": 3580
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a random priority\n# between 1 and 50000 for a aws_alb_listener_rule resource:\n\nresource \"random_integer\" \"priority\" {\n  min = 1\n  max = 50000\n  keepers = {\n    # Generate a new integer each time we switch to a new listener ARN\n    listener_arn = var.listener_arn\n  }\n}\n\nresource \"aws_alb_listener_rule\" \"main\" {\n  listener_arn = random_integer.priority.keepers.listener_arn\n  priority     = random_integer.priority.result\n\n  action {\n    type             = \"forward\"\n    target_group_arn = var.target_group_arn\n  }\n  # ... (other aws_alb_listener_rule arguments) ...\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 960
        },
        "end": {
          "line": 41,
          "column": 4,
          "offset": 1591
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random integers can be imported using the result, min, and max, with an\n# optional seed. This can be used to replace a config value with a value\n# interpolated from the random provider without experiencing diffs.\n\n# Example (values are separated by a ,):\nterraform import random_integer.priority 15390,1,50000",
      "position": {
        "start": {
          "line": 65,
          "column": 1,
          "offset": 2232
        },
        "end": {
          "line": 72,
          "column": 4,
          "offset": 2556
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a random priority\n# between 1 and 50000 for a aws_alb_listener_rule resource:\n\nresource \"random_integer\" \"priority\" {\n  min = 1\n  max = 50000\n  keepers = {\n    # Generate a new integer each time we switch to a new listener ARN\n    listener_arn = var.listener_arn\n  }\n}\n\nresource \"aws_alb_listener_rule\" \"main\" {\n  listener_arn = random_integer.priority.keepers.listener_arn\n  priority     = random_integer.priority.result\n\n  action {\n    type             = \"forward\"\n    target_group_arn = var.target_group_arn\n  }\n  # ... (other aws_alb_listener_rule arguments) ...\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 960
        },
        "end": {
          "line": 41,
          "column": 4,
          "offset": 1591
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random integers can be imported using the result, min, and max, with an\n# optional seed. This can be used to replace a config value with a value\n# interpolated from the random provider without experiencing diffs.\n\n# Example (values are separated by a ,):\nterraform import random_integer.priority 15390,1,50000",
      "position": {
        "start": {
          "line": 65,
          "column": 1,
          "offset": 2232
        },
        "end": {
          "line": 72,
          "column": 4,
          "offset": 2556
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length           = 16\n  special          = true\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nresource \"aws_db_instance\" \"example\" {\n  instance_class    = \"db.t3.micro\"\n  allocated_storage = 64\n  engine            = \"mysql\"\n  username          = \"someone\"\n  password          = random_password.password.result\n}",
      "position": {
        "start": {
          "line": 17,
          "column": 1,
          "offset": 858
        },
        "end": {
          "line": 31,
          "column": 4,
          "offset": 1229
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "terraform import random_password.password securepassword",
      "position": {
        "start": {
          "line": 64,
          "column": 1,
          "offset": 3391
        },
        "end": {
          "line": 66,
          "column": 4,
          "offset": 3460
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n}",
      "position": {
        "start": {
          "line": 75,
          "column": 1,
          "offset": 3736
        },
        "end": {
          "line": 80,
          "column": 4,
          "offset": 3825
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 14\n  lower  = true\n}",
      "position": {
        "start": {
          "line": 93,
          "column": 5,
          "offset": 4256
        },
        "end": {
          "line": 98,
          "column": 8,
          "offset": 4364
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 14\n}",
      "position": {
        "start": {
          "line": 103,
          "column": 5,
          "offset": 4458
        },
        "end": {
          "line": 107,
          "column": 8,
          "offset": 4546
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
      "position": {
        "start": {
          "line": 112,
          "column": 5,
          "offset": 4611
        },
        "end": {
          "line": 124,
          "column": 8,
          "offset": 4819
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length           = 16\n  special          = true\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nresource \"aws_db_instance\" \"example\" {\n  instance_class    = \"db.t3.micro\"\n  allocated_storage = 64\n  engine            = \"mysql\"\n  username          = \"someone\"\n  password          = random_password.password.result\n}",
      "position": {
        "start": {
          "line": 17,
          "column": 1,
          "offset": 858
        },
        "end": {
          "line": 31,
          "column": 4,
          "offset": 1229
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "terraform import random_password.password securepassword",
      "position": {
        "start": {
          "line": 64,
          "column": 1,
          "offset": 3391
        },
        "end": {
          "line": 66,
          "column": 4,
          "offset": 3460
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n}",
      "position": {
        "start": {
          "line": 75,
          "column": 1,
          "offset": 3736
        },
        "end": {
          "line": 80,
          "column": 4,
          "offset": 3825
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 14\n  lower  = true\n}",
      "position": {
        "start": {
          "line": 93,
          "column": 5,
          "offset": 4256
        },
        "end": {
          "line": 98,
          "column": 8,
          "offset": 4364
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 14\n}",
      "position": {
        "start": {
          "line": 103,
          "column": 5,
          "offset": 4458
        },
        "end": {
          "line": 107,
          "column": 8,
          "offset": 4546
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
      "position": {
        "start": {
          "line": 112,
          "column": 5,
          "offset": 4611
        },
        "end": {
          "line": 124,
          "column": 8,
          "offset": 4819
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique pet name\n# for an AWS EC2 instance that changes each time a new AMI id is\n# selected.\n\nresource \"random_pet\" \"server\" {\n  keepers = {\n    # Generate a new pet name each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server-${random_pet.server.id}\"\n  }\n\n  # Read the AMI id \"through\" the random_pet resource to ensure that\n  # both will change together.\n  ami = random_pet.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 928
        },
        "end": {
          "line": 41,
          "column": 4,
          "offset": 1516
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique pet name\n# for an AWS EC2 instance that changes each time a new AMI id is\n# selected.\n\nresource \"random_pet\" \"server\" {\n  keepers = {\n    # Generate a new pet name each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server-${random_pet.server.id}\"\n  }\n\n  # Read the AMI id \"through\" the random_pet resource to ensure that\n  # both will change together.\n  ami = random_pet.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 928
        },
        "end": {
          "line": 41,
          "column": 4,
          "offset": 1516
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
      "position": {
        "start": {
          "line": 15,
          "column": 1,
          "offset": 429
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 782
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
      "position": {
        "start": {
          "line": 15,
          "column": 1,
          "offset": 429
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 782
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"random\" {\n  length           = 16\n  special          = true\n  override_special = \"/@Â£$\"\n}",
      "position": {
        "start": {
          "line": 20,
          "column": 1,
          "offset": 1099
        },
        "end": {
          "line": 26,
          "column": 4,
          "offset": 1231
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "terraform import random_string.test test",
      "position": {
        "start": {
          "line": 58,
          "column": 1,
          "offset": 3101
        },
        "end": {
          "line": 60,
          "column": 4,
          "offset": 3154
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n}",
      "position": {
        "start": {
          "line": 69,
          "column": 1,
          "offset": 3430
        },
        "end": {
          "line": 74,
          "column": 4,
          "offset": 3513
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 4\n  lower  = true\n}",
      "position": {
        "start": {
          "line": 86,
          "column": 5,
          "offset": 3909
        },
        "end": {
          "line": 91,
          "column": 8,
          "offset": 4010
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 4\n}",
      "position": {
        "start": {
          "line": 94,
          "column": 5,
          "offset": 4102
        },
        "end": {
          "line": 98,
          "column": 8,
          "offset": 4183
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
      "position": {
        "start": {
          "line": 101,
          "column": 5,
          "offset": 4246
        },
        "end": {
          "line": 113,
          "column": 8,
          "offset": 4448
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"random\" {\n  length           = 16\n  special          = true\n  override_special = \"/@Â£$\"\n}",
      "position": {
        "start": {
          "line": 20,
          "column": 1,
          "offset": 1099
        },
        "end": {
          "line": 26,
          "column": 4,
          "offset": 1231
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "terraform import random_string.test test",
      "position": {
        "start": {
          "line": 58,
          "column": 1,
          "offset": 3101
        },
        "end": {
          "line": 60,
          "column": 4,
          "offset": 3154
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n}",
      "position": {
        "start": {
          "line": 69,
          "column": 1,
          "offset": 3430
        },
        "end": {
          "line": 74,
          "column": 4,
          "offset": 3513
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 4\n  lower  = true\n}",
      "position": {
        "start": {
          "line": 86,
          "column": 5,
          "offset": 3909
        },
        "end": {
          "line": 91,
          "column": 8,
          "offset": 4010
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 4\n}",
      "position": {
        "start": {
          "line": 94,
          "column": 5,
          "offset": 4102
        },
        "end": {
          "line": 98,
          "column": 8,
          "offset": 4183
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
      "position": {
        "start": {
          "line": 101,
          "column": 5,
          "offset": 4246
        },
        "end": {
          "line": 113,
          "column": 8,
          "offset": 4448
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique name for an Azure Resource Group.\n\nresource \"random_uuid\" \"test\" {\n}\n\nresource \"azurerm_resource_group\" \"test\" {\n  name     = \"${random_uuid.test.result}-rg\"\n  location = \"Central US\"\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 817
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 1074
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random UUID's can be imported. This can be used to replace a config\n# value with a value interpolated from the random provider without\n# experiencing diffs.\n\nterraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899",
      "position": {
        "start": {
          "line": 46,
          "column": 1,
          "offset": 1534
        },
        "end": {
          "line": 52,
          "column": 4,
          "offset": 1777
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique name for an Azure Resource Group.\n\nresource \"random_uuid\" \"test\" {\n}\n\nresource \"azurerm_resource_group\" \"test\" {\n  name     = \"${random_uuid.test.result}-rg\"\n  location = \"Central US\"\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 817
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 1074
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random UUID's can be imported. This can be used to replace a config\n# value with a value interpolated from the random provider without\n# experiencing diffs.\n\nterraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899",
      "position": {
        "start": {
          "line": 46,
          "column": 1,
          "offset": 1534
        },
        "end": {
          "line": 52,
          "column": 4,
          "offset": 1777
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 44,
          "column": 1,
          "offset": 1806
        },
        "end": {
          "line": 65,
          "column": 4,
          "offset": 2262
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 44,
          "column": 1,
          "offset": 1806
        },
        "end": {
          "line": 65,
          "column": 4,
          "offset": 2262
        }
      }
    }
  ],
  "invalidSnippets": [
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "# Random IDs can be imported using the b64_url with an optional prefix. This\n# can be used to replace a config value with a value interpolated from the\n# random provider without experiencing diffs.\n\n# Example with no prefix:\nterraform import random_id.server p-9hUg\n\n# Example with prefix (prefix is separated by a ,):\n$ terraform import random_id.server my-prefix-,p-9hUg",
        "position": {
          "start": {
            "line": 85,
            "column": 1,
            "offset": 3195
          },
          "end": {
            "line": 95,
            "column": 4,
            "offset": 3580
          }
        }
      },
      "error": {}
    },
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "# Random IDs can be imported using the b64_url with an optional prefix. This\n# can be used to replace a config value with a value interpolated from the\n# random provider without experiencing diffs.\n\n# Example with no prefix:\nterraform import random_id.server p-9hUg\n\n# Example with prefix (prefix is separated by a ,):\n$ terraform import random_id.server my-prefix-,p-9hUg",
        "position": {
          "start": {
            "line": 85,
            "column": 1,
            "offset": 3195
          },
          "end": {
            "line": 95,
            "column": 4,
            "offset": 3580
          }
        }
      },
      "error": {}
    },
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "# Random integers can be imported using the result, min, and max, with an\n# optional seed. This can be used to replace a config value with a value\n# interpolated from the random provider without experiencing diffs.\n\n# Example (values are separated by a ,):\nterraform import random_integer.priority 15390,1,50000",
        "position": {
          "start": {
            "line": 65,
            "column": 1,
            "offset": 2232
          },
          "end": {
            "line": 72,
            "column": 4,
            "offset": 2556
          }
        }
      },
      "error": {}
    },
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "# Random integers can be imported using the result, min, and max, with an\n# optional seed. This can be used to replace a config value with a value\n# interpolated from the random provider without experiencing diffs.\n\n# Example (values are separated by a ,):\nterraform import random_integer.priority 15390,1,50000",
        "position": {
          "start": {
            "line": 65,
            "column": 1,
            "offset": 2232
          },
          "end": {
            "line": 72,
            "column": 4,
            "offset": 2556
          }
        }
      },
      "error": {}
    },
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "terraform import random_password.password securepassword",
        "position": {
          "start": {
            "line": 64,
            "column": 1,
            "offset": 3391
          },
          "end": {
            "line": 66,
            "column": 4,
            "offset": 3460
          }
        }
      },
      "error": {}
    },
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "terraform import random_password.password securepassword",
        "position": {
          "start": {
            "line": 64,
            "column": 1,
            "offset": 3391
          },
          "end": {
            "line": 66,
            "column": 4,
            "offset": 3460
          }
        }
      },
      "error": {}
    },
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "terraform import random_string.test test",
        "position": {
          "start": {
            "line": 58,
            "column": 1,
            "offset": 3101
          },
          "end": {
            "line": 60,
            "column": 4,
            "offset": 3154
          }
        }
      },
      "error": {}
    },
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "terraform import random_string.test test",
        "position": {
          "start": {
            "line": 58,
            "column": 1,
            "offset": 3101
          },
          "end": {
            "line": 60,
            "column": 4,
            "offset": 3154
          }
        }
      },
      "error": {}
    },
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "# Random UUID's can be imported. This can be used to replace a config\n# value with a value interpolated from the random provider without\n# experiencing diffs.\n\nterraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899",
        "position": {
          "start": {
            "line": 46,
            "column": 1,
            "offset": 1534
          },
          "end": {
            "line": 52,
            "column": 4,
            "offset": 1777
          }
        }
      },
      "error": {}
    },
    {
      "snippet": {
        "type": "code",
        "lang": "shell",
        "meta": null,
        "value": "# Random UUID's can be imported. This can be used to replace a config\n# value with a value interpolated from the random provider without\n# experiencing diffs.\n\nterraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899",
        "position": {
          "start": {
            "line": 46,
            "column": 1,
            "offset": 1534
          },
          "end": {
            "line": 52,
            "column": 4,
            "offset": 1777
          }
        }
      },
      "error": {}
    }
  ],
  "validSnippets": [
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random IDs can be imported using the b64_url with an optional prefix. This\n# can be used to replace a config value with a value interpolated from the\n# random provider without experiencing diffs.\n\n# Example with no prefix:\nterraform import random_id.server p-9hUg\n\n# Example with prefix (prefix is separated by a ,):\n$ terraform import random_id.server my-prefix-,p-9hUg",
      "position": {
        "start": {
          "line": 85,
          "column": 1,
          "offset": 3195
        },
        "end": {
          "line": 95,
          "column": 4,
          "offset": 3580
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique name for an AWS EC2\n# instance that changes each time a new AMI id is selected.\n\nresource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 35,
          "column": 1,
          "offset": 1393
        },
        "end": {
          "line": 59,
          "column": 4,
          "offset": 1985
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random IDs can be imported using the b64_url with an optional prefix. This\n# can be used to replace a config value with a value interpolated from the\n# random provider without experiencing diffs.\n\n# Example with no prefix:\nterraform import random_id.server p-9hUg\n\n# Example with prefix (prefix is separated by a ,):\n$ terraform import random_id.server my-prefix-,p-9hUg",
      "position": {
        "start": {
          "line": 85,
          "column": 1,
          "offset": 3195
        },
        "end": {
          "line": 95,
          "column": 4,
          "offset": 3580
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique name for an AWS EC2\n# instance that changes each time a new AMI id is selected.\n\nresource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 35,
          "column": 1,
          "offset": 1393
        },
        "end": {
          "line": 59,
          "column": 4,
          "offset": 1985
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random integers can be imported using the result, min, and max, with an\n# optional seed. This can be used to replace a config value with a value\n# interpolated from the random provider without experiencing diffs.\n\n# Example (values are separated by a ,):\nterraform import random_integer.priority 15390,1,50000",
      "position": {
        "start": {
          "line": 65,
          "column": 1,
          "offset": 2232
        },
        "end": {
          "line": 72,
          "column": 4,
          "offset": 2556
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a random priority\n# between 1 and 50000 for a aws_alb_listener_rule resource:\n\nresource \"random_integer\" \"priority\" {\n  min = 1\n  max = 50000\n  keepers = {\n    # Generate a new integer each time we switch to a new listener ARN\n    listener_arn = var.listener_arn\n  }\n}\n\nresource \"aws_alb_listener_rule\" \"main\" {\n  listener_arn = random_integer.priority.keepers.listener_arn\n  priority     = random_integer.priority.result\n\n  action {\n    type             = \"forward\"\n    target_group_arn = var.target_group_arn\n  }\n  # ... (other aws_alb_listener_rule arguments) ...\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 960
        },
        "end": {
          "line": 41,
          "column": 4,
          "offset": 1591
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random integers can be imported using the result, min, and max, with an\n# optional seed. This can be used to replace a config value with a value\n# interpolated from the random provider without experiencing diffs.\n\n# Example (values are separated by a ,):\nterraform import random_integer.priority 15390,1,50000",
      "position": {
        "start": {
          "line": 65,
          "column": 1,
          "offset": 2232
        },
        "end": {
          "line": 72,
          "column": 4,
          "offset": 2556
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a random priority\n# between 1 and 50000 for a aws_alb_listener_rule resource:\n\nresource \"random_integer\" \"priority\" {\n  min = 1\n  max = 50000\n  keepers = {\n    # Generate a new integer each time we switch to a new listener ARN\n    listener_arn = var.listener_arn\n  }\n}\n\nresource \"aws_alb_listener_rule\" \"main\" {\n  listener_arn = random_integer.priority.keepers.listener_arn\n  priority     = random_integer.priority.result\n\n  action {\n    type             = \"forward\"\n    target_group_arn = var.target_group_arn\n  }\n  # ... (other aws_alb_listener_rule arguments) ...\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 960
        },
        "end": {
          "line": 41,
          "column": 4,
          "offset": 1591
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
      "position": {
        "start": {
          "line": 112,
          "column": 5,
          "offset": 4611
        },
        "end": {
          "line": 124,
          "column": 8,
          "offset": 4819
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 14\n}",
      "position": {
        "start": {
          "line": 103,
          "column": 5,
          "offset": 4458
        },
        "end": {
          "line": 107,
          "column": 8,
          "offset": 4546
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 14\n  lower  = true\n}",
      "position": {
        "start": {
          "line": 93,
          "column": 5,
          "offset": 4256
        },
        "end": {
          "line": 98,
          "column": 8,
          "offset": 4364
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n}",
      "position": {
        "start": {
          "line": 75,
          "column": 1,
          "offset": 3736
        },
        "end": {
          "line": 80,
          "column": 4,
          "offset": 3825
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "terraform import random_password.password securepassword",
      "position": {
        "start": {
          "line": 64,
          "column": 1,
          "offset": 3391
        },
        "end": {
          "line": 66,
          "column": 4,
          "offset": 3460
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length           = 16\n  special          = true\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nresource \"aws_db_instance\" \"example\" {\n  instance_class    = \"db.t3.micro\"\n  allocated_storage = 64\n  engine            = \"mysql\"\n  username          = \"someone\"\n  password          = random_password.password.result\n}",
      "position": {
        "start": {
          "line": 17,
          "column": 1,
          "offset": 858
        },
        "end": {
          "line": 31,
          "column": 4,
          "offset": 1229
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
      "position": {
        "start": {
          "line": 112,
          "column": 5,
          "offset": 4611
        },
        "end": {
          "line": 124,
          "column": 8,
          "offset": 4819
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 14\n}",
      "position": {
        "start": {
          "line": 103,
          "column": 5,
          "offset": 4458
        },
        "end": {
          "line": 107,
          "column": 8,
          "offset": 4546
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 14\n  lower  = true\n}",
      "position": {
        "start": {
          "line": 93,
          "column": 5,
          "offset": 4256
        },
        "end": {
          "line": 98,
          "column": 8,
          "offset": 4364
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length = 16\n  lower  = false\n}",
      "position": {
        "start": {
          "line": 75,
          "column": 1,
          "offset": 3736
        },
        "end": {
          "line": 80,
          "column": 4,
          "offset": 3825
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "terraform import random_password.password securepassword",
      "position": {
        "start": {
          "line": 64,
          "column": 1,
          "offset": 3391
        },
        "end": {
          "line": 66,
          "column": 4,
          "offset": 3460
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_password\" \"password\" {\n  length           = 16\n  special          = true\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nresource \"aws_db_instance\" \"example\" {\n  instance_class    = \"db.t3.micro\"\n  allocated_storage = 64\n  engine            = \"mysql\"\n  username          = \"someone\"\n  password          = random_password.password.result\n}",
      "position": {
        "start": {
          "line": 17,
          "column": 1,
          "offset": 858
        },
        "end": {
          "line": 31,
          "column": 4,
          "offset": 1229
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique pet name\n# for an AWS EC2 instance that changes each time a new AMI id is\n# selected.\n\nresource \"random_pet\" \"server\" {\n  keepers = {\n    # Generate a new pet name each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server-${random_pet.server.id}\"\n  }\n\n  # Read the AMI id \"through\" the random_pet resource to ensure that\n  # both will change together.\n  ami = random_pet.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 928
        },
        "end": {
          "line": 41,
          "column": 4,
          "offset": 1516
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique pet name\n# for an AWS EC2 instance that changes each time a new AMI id is\n# selected.\n\nresource \"random_pet\" \"server\" {\n  keepers = {\n    # Generate a new pet name each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server-${random_pet.server.id}\"\n  }\n\n  # Read the AMI id \"through\" the random_pet resource to ensure that\n  # both will change together.\n  ami = random_pet.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 928
        },
        "end": {
          "line": 41,
          "column": 4,
          "offset": 1516
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
      "position": {
        "start": {
          "line": 15,
          "column": 1,
          "offset": 429
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 782
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
      "position": {
        "start": {
          "line": 15,
          "column": 1,
          "offset": 429
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 782
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
      "position": {
        "start": {
          "line": 101,
          "column": 5,
          "offset": 4246
        },
        "end": {
          "line": 113,
          "column": 8,
          "offset": 4448
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 4\n}",
      "position": {
        "start": {
          "line": 94,
          "column": 5,
          "offset": 4102
        },
        "end": {
          "line": 98,
          "column": 8,
          "offset": 4183
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 4\n  lower  = true\n}",
      "position": {
        "start": {
          "line": 86,
          "column": 5,
          "offset": 3909
        },
        "end": {
          "line": 91,
          "column": 8,
          "offset": 4010
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n}",
      "position": {
        "start": {
          "line": 69,
          "column": 1,
          "offset": 3430
        },
        "end": {
          "line": 74,
          "column": 4,
          "offset": 3513
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "terraform import random_string.test test",
      "position": {
        "start": {
          "line": 58,
          "column": 1,
          "offset": 3101
        },
        "end": {
          "line": 60,
          "column": 4,
          "offset": 3154
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"random\" {\n  length           = 16\n  special          = true\n  override_special = \"/@Â£$\"\n}",
      "position": {
        "start": {
          "line": 20,
          "column": 1,
          "offset": 1099
        },
        "end": {
          "line": 26,
          "column": 4,
          "offset": 1231
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      lower,\n    ]\n  }\n}",
      "position": {
        "start": {
          "line": 101,
          "column": 5,
          "offset": 4246
        },
        "end": {
          "line": 113,
          "column": 8,
          "offset": 4448
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 4\n}",
      "position": {
        "start": {
          "line": 94,
          "column": 5,
          "offset": 4102
        },
        "end": {
          "line": 98,
          "column": 8,
          "offset": 4183
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 4\n  lower  = true\n}",
      "position": {
        "start": {
          "line": 86,
          "column": 5,
          "offset": 3909
        },
        "end": {
          "line": 91,
          "column": 8,
          "offset": 4010
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"test\" {\n  length = 16\n  lower  = false\n}",
      "position": {
        "start": {
          "line": 69,
          "column": 1,
          "offset": 3430
        },
        "end": {
          "line": 74,
          "column": 4,
          "offset": 3513
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "terraform import random_string.test test",
      "position": {
        "start": {
          "line": 58,
          "column": 1,
          "offset": 3101
        },
        "end": {
          "line": 60,
          "column": 4,
          "offset": 3154
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_string\" \"random\" {\n  length           = 16\n  special          = true\n  override_special = \"/@Â£$\"\n}",
      "position": {
        "start": {
          "line": 20,
          "column": 1,
          "offset": 1099
        },
        "end": {
          "line": 26,
          "column": 4,
          "offset": 1231
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random UUID's can be imported. This can be used to replace a config\n# value with a value interpolated from the random provider without\n# experiencing diffs.\n\nterraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899",
      "position": {
        "start": {
          "line": 46,
          "column": 1,
          "offset": 1534
        },
        "end": {
          "line": 52,
          "column": 4,
          "offset": 1777
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique name for an Azure Resource Group.\n\nresource \"random_uuid\" \"test\" {\n}\n\nresource \"azurerm_resource_group\" \"test\" {\n  name     = \"${random_uuid.test.result}-rg\"\n  location = \"Central US\"\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 817
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 1074
        }
      }
    },
    {
      "type": "code",
      "lang": "shell",
      "meta": null,
      "value": "# Random UUID's can be imported. This can be used to replace a config\n# value with a value interpolated from the random provider without\n# experiencing diffs.\n\nterraform import random_uuid.main aabbccdd-eeff-0011-2233-445566778899",
      "position": {
        "start": {
          "line": 46,
          "column": 1,
          "offset": 1534
        },
        "end": {
          "line": 52,
          "column": 4,
          "offset": 1777
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "# The following example shows how to generate a unique name for an Azure Resource Group.\n\nresource \"random_uuid\" \"test\" {\n}\n\nresource \"azurerm_resource_group\" \"test\" {\n  name     = \"${random_uuid.test.result}-rg\"\n  location = \"Central US\"\n}",
      "position": {
        "start": {
          "line": 18,
          "column": 1,
          "offset": 817
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 1074
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 44,
          "column": 1,
          "offset": 1806
        },
        "end": {
          "line": 65,
          "column": 4,
          "offset": 2262
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_id\" \"server\" {\n  keepers = {\n    # Generate a new id each time we switch to a new AMI id\n    ami_id = var.ami_id\n  }\n\n  byte_length = 8\n}\n\nresource \"aws_instance\" \"server\" {\n  tags = {\n    Name = \"web-server ${random_id.server.hex}\"\n  }\n\n  # Read the AMI id \"through\" the random_id resource to ensure that\n  # both will change together.\n  ami = random_id.server.keepers.ami_id\n\n  # ... (other aws_instance arguments) ...\n}",
      "position": {
        "start": {
          "line": 44,
          "column": 1,
          "offset": 1806
        },
        "end": {
          "line": 65,
          "column": 4,
          "offset": 2262
        }
      }
    }
  ],
  "failedConverts": [],
  "skippedFiles": []
}
