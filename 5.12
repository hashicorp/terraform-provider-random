â¬¤  debug     Preparing to convert provider docs {
  path: '.',
  provider: { type: 'registry', requirement: 'hashicorp/random' },
  failOnTranslationError: false,
  languages: [ 'typescript', 'python' ],
  files: [
    'index.md',
    'resources/uuid.md',
    'resources/string.md',
    'resources/shuffle.md',
    'resources/pet.md',
    'resources/password.md',
    'resources/integer.md',
    'resources/id.md'
  ],
  additionalProviderRequirements: [],
  parallelConversionsPerDocument: 3,
  parallelFileConversions: 1,
  doNotEditFileComment: 'Please do not edit this file, it is generated.'
}
â¬¤  debug     Initializing cdktf project in /tmp/cdktf-registry-docsfCjYyR
[91m[2023-08-14T12:59:40.133] [ERROR] default - [39mThere are some problems with the CLI configuration:
â•·
â”‚ Error: The specified plugin cache dir /terraform-plugins cannot be opened: stat /terraform-plugins: no such file or directory
â”‚
â•µ

As a result of the above problems, Terraform may not behave as intended.




[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m
- Finding latest version of hashicorp/random...
- Installing hashicorp/random v3.5.1...
- Installed hashicorp/random v3.5.1 (signed by HashiCorp)

Terraform has created a lock file [1m.terraform.lock.hcl[0m to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.[0m

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m

added 2 packages, and audited 57 packages in 1s

7 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

added 309 packages, and audited 366 packages in 8s

37 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
========================================================================================================

  Your cdktf typescript project is ready!

  cat help                Print this message

  Compile:
    npm run get           Import/update Terraform providers and modules (you should check-in this directory)
    npm run compile       Compile typescript code to javascript (or "npm run watch")
    npm run watch         Watch for changes and compile typescript in the background
    npm run build         Compile typescript

  Synthesize:
    cdktf synth [stack]   Synthesize Terraform resources from stacks to cdktf.out/ (ready for 'terraform apply')

  Diff:
    cdktf diff [stack]    Perform a diff (terraform plan) for the given stack

  Deploy:
    cdktf deploy [stack]  Deploy the given stack

  Destroy:
    cdktf destroy [stack] Destroy the stack

  Test:
    npm run test        Runs unit tests (edit __tests__/main-test.ts to add your own tests)
    npm run test:watch  Watches the tests and reruns them on change

  Upgrades:
    npm run upgrade        Upgrade cdktf modules to latest version
    npm run upgrade:next   Upgrade cdktf modules to latest "@next" version (last commit)

 Use Providers:

  You can add prebuilt providers (if available) or locally generated ones using the add command:
  
  cdktf provider add "aws@~>3.0" null kreuzwerker/docker

  You can find all prebuilt providers on npm: https://www.npmjs.com/search?q=keywords:cdktf
  You can also install these providers directly through npm:

  npm install @cdktf/provider-aws
  npm install @cdktf/provider-google
  npm install @cdktf/provider-azurerm
  npm install @cdktf/provider-docker
  npm install @cdktf/provider-github
  npm install @cdktf/provider-null

  You can also build any module or provider locally. Learn more https://cdk.tf/modules-and-providers

========================================================================================================

â¬¤  debug     Preparation done, executing in /tmp/cdktf-registry-docsfCjYyR
â¬¤  debug     Files to convert: [
  "index.md",
  "resources/uuid.md",
  "resources/string.md",
  "resources/shuffle.md",
  "resources/pet.md",
  "resources/password.md",
  "resources/integer.md",
  "resources/id.md"
]
â„¹  info      Converting 16 files to 2 languages
â„¹  info      Filtered 14 files that already exist and are up to date
â¬¤  debug     Converting markdown document with python code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_shuffle Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_shuffle generates a random permutation of a list of strings given as an argument.
---

# random_shuffle (Resource)

The resource `random_shuffle` generates a random permutation of a list of strings given as an argument.

## Example Usage

```terraform
resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `input` (List of String) The list of strings to shuffle.

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `result_count` (Number) The number of results to return. Defaults to the number of items in the `input` list. If fewer items are requested, some elements will be excluded from the result. If more items are requested, items will be repeated in the result but not more frequently than the number of items in the input list.
- `seed` (String) Arbitrary string with which to seed the random number generator, in order to produce less-volatile permutations of the list.

**Important:** Even with an identical seed, it is not guaranteed that the same permutation will be produced across different versions of Terraform. This argument causes the result to be *less volatile*, but not fixed for all time.

### Read-Only

- `id` (String) A static value used internally by Terraform, this should not be referenced in configurations.
- `result` (List of String) Random permutation of the list of strings given in `input`.

â„¹  info      Extracted 1 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
    "position": {
      "start": {
        "line": 15,
        "column": 1,
        "offset": 429
      },
      "end": {
        "line": 28,
        "column": 4,
        "offset": 782
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}'
â¬¤  debug     Converted snippet: 'resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}' to 'from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.elb import Elb
from imports.random.shuffle import Shuffle
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
        #     For a more precise conversion please use the --provider flag in convert.
        az = Shuffle(self, "az",
            input=["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"],
            result_count=2
        )
        Elb(self, "example",
            availability_zones=az.result
        )'
â¬¤  debug     Converting markdown document with typescript code snippets
â¬¤  debug     Input: 
 ---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "random_shuffle Resource - terraform-provider-random"
subcategory: ""
description: |-
  The resource random_shuffle generates a random permutation of a list of strings given as an argument.
---

# random_shuffle (Resource)

The resource `random_shuffle` generates a random permutation of a list of strings given as an argument.

## Example Usage

```terraform
resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `input` (List of String) The list of strings to shuffle.

### Optional

- `keepers` (Map of String) Arbitrary map of values that, when changed, will trigger recreation of resource. See [the main provider documentation](../index.html) for more information.
- `result_count` (Number) The number of results to return. Defaults to the number of items in the `input` list. If fewer items are requested, some elements will be excluded from the result. If more items are requested, items will be repeated in the result but not more frequently than the number of items in the input list.
- `seed` (String) Arbitrary string with which to seed the random number generator, in order to produce less-volatile permutations of the list.

**Important:** Even with an identical seed, it is not guaranteed that the same permutation will be produced across different versions of Terraform. This argument causes the result to be *less volatile*, but not fixed for all time.

### Read-Only

- `id` (String) A static value used internally by Terraform, this should not be referenced in configurations.
- `result` (List of String) Random permutation of the list of strings given in `input`.

â„¹  info      Extracted 1 code snippets
â¬¤  debug     Extracted code snippets: [
  {
    "type": "code",
    "lang": "terraform",
    "meta": null,
    "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
    "position": {
      "start": {
        "line": 15,
        "column": 1,
        "offset": 429
      },
      "end": {
        "line": 28,
        "column": 4,
        "offset": 782
      }
    }
  }
]
â¬¤  debug     Converting snippet: 'resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}'
â¬¤  debug     Converted snippet: 'resource "random_shuffle" "az" {
  input        = ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"]
  result_count = 2
}

resource "aws_elb" "example" {
  # Place the ELB in any two of the given availability zones, selected
  # at random.
  availability_zones = random_shuffle.az.result

  # ... and other aws_elb arguments ...
}' to 'import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Elb } from "./.gen/providers/aws/elb";
import { Shuffle } from "./.gen/providers/random/shuffle";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
    For a more precise conversion please use the --provider flag in convert.*/
    const az = new Shuffle(this, "az", {
      input: ["us-west-1a", "us-west-1c", "us-west-1d", "us-west-1e"],
      resultCount: 2,
    });
    new Elb(this, "example", {
      availability_zones: az.result,
    });
  }
}
'
ðŸ“‹  report    {
  "files": [
    "index.md",
    "resources/uuid.md",
    "resources/string.md",
    "resources/shuffle.md",
    "resources/pet.md",
    "resources/password.md",
    "resources/integer.md",
    "resources/id.md"
  ],
  "snippets": [
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
      "position": {
        "start": {
          "line": 15,
          "column": 1,
          "offset": 429
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 782
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
      "position": {
        "start": {
          "line": 15,
          "column": 1,
          "offset": 429
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 782
        }
      }
    }
  ],
  "invalidSnippets": [],
  "validSnippets": [
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
      "position": {
        "start": {
          "line": 15,
          "column": 1,
          "offset": 429
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 782
        }
      }
    },
    {
      "type": "code",
      "lang": "terraform",
      "meta": null,
      "value": "resource \"random_shuffle\" \"az\" {\n  input        = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]\n  result_count = 2\n}\n\nresource \"aws_elb\" \"example\" {\n  # Place the ELB in any two of the given availability zones, selected\n  # at random.\n  availability_zones = random_shuffle.az.result\n\n  # ... and other aws_elb arguments ...\n}",
      "position": {
        "start": {
          "line": 15,
          "column": 1,
          "offset": 429
        },
        "end": {
          "line": 28,
          "column": 4,
          "offset": 782
        }
      }
    }
  ],
  "failedConverts": [],
  "skippedFiles": [
    {
      "file": "index.md",
      "language": "python"
    },
    {
      "file": "index.md",
      "language": "typescript"
    },
    {
      "file": "resources/uuid.md",
      "language": "python"
    },
    {
      "file": "resources/uuid.md",
      "language": "typescript"
    },
    {
      "file": "resources/string.md",
      "language": "typescript"
    },
    {
      "file": "resources/string.md",
      "language": "python"
    },
    {
      "file": "resources/pet.md",
      "language": "typescript"
    },
    {
      "file": "resources/password.md",
      "language": "typescript"
    },
    {
      "file": "resources/pet.md",
      "language": "python"
    },
    {
      "file": "resources/password.md",
      "language": "python"
    },
    {
      "file": "resources/integer.md",
      "language": "typescript"
    },
    {
      "file": "resources/integer.md",
      "language": "python"
    },
    {
      "file": "resources/id.md",
      "language": "python"
    },
    {
      "file": "resources/id.md",
      "language": "typescript"
    }
  ]
}
